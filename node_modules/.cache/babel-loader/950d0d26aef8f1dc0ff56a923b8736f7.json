{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nlet AuthStore = (_dec = action.bound, (_class = (_temp = class AuthStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"isLoggedIn\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loggedInUser\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"logIn\", _descriptor3, this);\n\n    this.rootStore = rootStore;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoggedIn\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loggedInUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"logIn\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async credentials => {\n      try {\n        const users = await Axios.get('http://localhost:3001/api/get/users');\n        const user = users.filter(u => u.email == credentials.email && u.password == credentials.password);\n\n        if (user) {\n          runInAction(() => {\n            isLoggedIn = true;\n            loggedInUser = user;\n          });\n        }\n\n        debugger;\n      } catch {}\n    };\n  }\n})), _class));\nexport default AuthStore;","map":{"version":3,"sources":["D:/management-tool/src/client/common/stores/AuthStore.js"],"names":["observable","action","runInAction","AuthStore","bound","constructor","rootStore","credentials","users","Axios","get","user","filter","u","email","password","isLoggedIn","loggedInUser"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;IAEMC,S,WAUDF,MAAM,CAACG,K,qBAVZ,MAAMD,SAAN,CAAgB;AAMZE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AARW,C,oFACXN,U;;;;;WACY,K;;gFACZA,U;;;;;WACc,I;;;;;;;WAOP,MAAOO,WAAP,IAAuB;AAC3B,UAAI;AACA,cAAMC,KAAK,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAU,qCAAV,CAApB;AACA,cAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACC,KAAF,IAAWP,WAAW,CAACO,KAAvB,IAAgCD,CAAC,CAACE,QAAF,IAAcR,WAAW,CAACQ,QAA5E,CAAb;;AACA,YAAGJ,IAAH,EAAS;AACLT,UAAAA,WAAW,CAAC,MAAM;AACdc,YAAAA,UAAU,GAAG,IAAb;AACAC,YAAAA,YAAY,GAAGN,IAAf;AACH,WAHU,CAAX;AAIH;;AACD;AACH,OAVD,CAWA,MAAM,CAEL;AACJ,K;;;AAGL,eAAeR,SAAf","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\n\r\nclass AuthStore {\r\n    @observable\r\n    isLoggedIn = false;\r\n    @observable\r\n    loggedInUser = null;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @action.bound\r\n    logIn = async (credentials) => {\r\n        try {\r\n            const users = await Axios.get('http://localhost:3001/api/get/users');\r\n            const user = users.filter(u => u.email == credentials.email && u.password == credentials.password);\r\n            if(user) {\r\n                runInAction(() => {\r\n                    isLoggedIn = true;\r\n                    loggedInUser = user;\r\n                })\r\n            }\r\n            debugger\r\n        }\r\n        catch {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthStore;"]},"metadata":{},"sourceType":"module"}