{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const users = await Axios.get('http://localhost:3001/api/get/companies');\n          debugger;\n          const isValidKey = users.data.find(k => k.key === values.companyKey);\n          isValidKey && (await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyKey: values.companyKey\n          }));\n        } catch (e) {\n          this.userForm.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          /*const companies = await Axios.get('http://localhost:3001/api/get/companies');\r\n          do {\r\n              key = Math.random().toString(36).slice(8);\r\n              debugger\r\n          } while (companies.data.includes(key))*/\n          const key = Math.random().toString(36).slice(8);\n          debugger;\n          await Axios.post('http://localhost:3001/api/create/company', {\n            key: key,\n            email: values.email,\n            password: values.password,\n            companyName: values.companyName,\n            companyAddress: values.companyAddress,\n            companyCity: values.companyCity\n          });\n        } catch (e) {\n          this.companyForm.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","form","values","console","log","users","get","isValidKey","data","find","k","key","companyKey","post","email","password","e","invalidate","message","onError","companyForm","Math","random","toString","slice","companyName","companyAddress","companyCity"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SA4CvBC,aA5CuB,GA4CP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KA9CsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,KAAK,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,yCAAV,CAApB;AACA;AACA,gBAAMC,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUT,MAAM,CAACU,UAAtC,CAAnB;AACAL,UAAAA,UAAU,KAAI,MAAMf,KAAK,CAACqB,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,KAAK,EAAEZ,MAAM,CAACY,KAAhB;AAAuBC,YAAAA,QAAQ,EAAEb,MAAM,CAACa,QAAxC;AAAkDH,YAAAA,UAAU,EAAEV,MAAM,CAACU;AAArE,WAApD,CAAV,CAAV;AACH,SALD,CAKE,OAAOI,CAAP,EAAU;AACR,eAAKjB,QAAL,CAAckB,UAAd,CAAyBD,CAAC,CAACE,OAA3B;AACH;AACJ,OAZgC;AAajCC,MAAAA,OAAO,EAAGlB,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAhBgC,KAArB,CAAhB;AAkBA,SAAKkB,WAAL,GAAmB,IAAI7B,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA;;;;;AAKA,gBAAMS,GAAG,GAAGU,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAZ;AACA;AACA,gBAAMhC,KAAK,CAACqB,IAAN,CAAW,0CAAX,EAAuD;AAAEF,YAAAA,GAAG,EAAEA,GAAP;AAAYG,YAAAA,KAAK,EAAEZ,MAAM,CAACY,KAA1B;AAAiCC,YAAAA,QAAQ,EAAEb,MAAM,CAACa,QAAlD;AAA4DU,YAAAA,WAAW,EAAEvB,MAAM,CAACuB,WAAhF;AAA6FC,YAAAA,cAAc,EAAExB,MAAM,CAACwB,cAApH;AAAoIC,YAAAA,WAAW,EAAEzB,MAAM,CAACyB;AAAxJ,WAAvD,CAAN;AACH,SATD,CASE,OAAOX,CAAP,EAAU;AACR,eAAKI,WAAL,CAAiBH,UAAjB,CAA4BD,CAAC,CAACE,OAA9B;AACH;AACJ,OAhBsC;AAiBvCC,MAAAA,OAAO,EAAGlB,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AApBsC,KAAxB,CAAnB;AAsBH;;AA3CmB;;AAkDxB,eAAeT,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const users = await Axios.get('http://localhost:3001/api/get/companies');\r\n                    debugger\r\n                    const isValidKey = users.data.find(k => k.key === values.companyKey);\r\n                    isValidKey && await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyKey: values.companyKey });\r\n                } catch (e) {\r\n                    this.userForm.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    /*const companies = await Axios.get('http://localhost:3001/api/get/companies');\r\n                    do {\r\n                        key = Math.random().toString(36).slice(8);\r\n                        debugger\r\n                    } while (companies.data.includes(key))*/\r\n                    const key = Math.random().toString(36).slice(8);\r\n                    debugger\r\n                    await Axios.post('http://localhost:3001/api/create/company', { key: key, email: values.email, password: values.password, companyName: values.companyName, companyAddress: values.companyAddress, companyCity: values.companyCity })\r\n                } catch (e) {\r\n                    this.companyForm.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}