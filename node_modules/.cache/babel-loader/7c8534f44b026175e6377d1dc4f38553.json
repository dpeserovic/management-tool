{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nimport { EditItemForm } from '../forms';\nimport Axios from 'axios';\nlet EditItemViewStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class EditItemViewStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"categories\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"item\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getItem\", _descriptor4, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.id = this.rootStore.routerStore.router.routerState.params.id;\n    this.form = new EditItemForm({\n      onInit: async () => {\n        debugger;\n        await this.getCategories();\n      },\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {} catch (error) {\n          this.form.invalidate(error.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"item\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      debugger;\n      const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.id);\n      console.log('Success', companyCategories);\n      debugger;\n      runInAction(() => {\n        this.categories = companyCategories;\n      });\n      debugger;\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getItem\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      debugger;\n      const item = await Axios.get('http://localhost:3001/api/get/item/' + this.id);\n      console.log('Success', item);\n      debugger;\n      runInAction(() => {\n        this.item = item;\n      });\n      debugger;\n    };\n  }\n})), _class));\nexport default EditItemViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/item/stores/EditItemViewStore.js"],"names":["observable","action","runInAction","EditItemForm","Axios","EditItemViewStore","bound","constructor","rootStore","navigateDashboard","routerStore","goTo","id","router","routerState","params","form","onInit","getCategories","onSuccess","values","console","log","error","invalidate","message","onError","companyCategories","get","authStore","loggedInUser","categories","item"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,iB,WA8BDJ,MAAM,CAACK,K,UAYPL,MAAM,CAACK,K,qBA1CZ,MAAMD,iBAAN,CAAwB;AAMpBE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAgDvBC,iBAhDuB,GAgDH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KAlDsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,EAAL,GAAU,KAAKJ,SAAL,CAAeE,WAAf,CAA2BG,MAA3B,CAAkCC,WAAlC,CAA8CC,MAA9C,CAAqDH,EAA/D;AAEA,SAAKI,IAAL,GAAY,IAAIb,YAAJ,CAAiB;AACzBc,MAAAA,MAAM,EAAE,YAAY;AAChB;AACA,cAAM,KAAKC,aAAL,EAAN;AACH,OAJwB;AAKzBC,MAAAA,SAAS,EAAE,MAAOH,IAAP,IAAgB;AACvB,cAAMI,MAAM,GAAGJ,IAAI,CAACI,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI,CACH,CADD,CACE,OAAOG,KAAP,EAAc;AACZ,eAAKP,IAAL,CAAUQ,UAAV,CAAqBD,KAAK,CAACE,OAA3B;AACH;AACJ,OAZwB;AAazBC,MAAAA,OAAO,EAAGV,IAAD,IAAU;AACf,cAAMI,MAAM,GAAGJ,IAAI,CAACI,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAhBwB,KAAjB,CAAZ;AAkBH;;AA5BmB,C,oFACnBpB,U;;;;;wEAEAA,U;;;;;;;;;;WA4Be,YAAY;AACxB;AACA,YAAM2B,iBAAiB,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAU,8CAA8C,KAAKpB,SAAL,CAAeqB,SAAf,CAAyBC,YAAzB,CAAsClB,EAA9F,CAAhC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBK,iBAAvB;AACA;AACAzB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAK6B,UAAL,GAAkBJ,iBAAlB;AACH,OAFU,CAAX;AAGA;AACH,K;;;;;;;WAGS,YAAY;AAClB;AACA,YAAMK,IAAI,GAAG,MAAM5B,KAAK,CAACwB,GAAN,CAAU,wCAAwC,KAAKhB,EAAvD,CAAnB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,IAAvB;AACA;AACA9B,MAAAA,WAAW,CAAC,MAAM;AACd,aAAK8B,IAAL,GAAYA,IAAZ;AACH,OAFU,CAAX;AAGA;AACH,K;;;AAOL,eAAe3B,iBAAf","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\nimport { EditItemForm } from '../forms'\r\nimport Axios from 'axios';\r\n\r\nclass EditItemViewStore {\r\n    @observable\r\n    categories;\r\n    @observable\r\n    item;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.id = this.rootStore.routerStore.router.routerState.params.id;\r\n\r\n        this.form = new EditItemForm({\r\n            onInit: async () => {\r\n                debugger\r\n                await this.getCategories();\r\n            },\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                } catch (error) {\r\n                    this.form.invalidate(error.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        debugger\r\n        const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.id);\r\n        console.log('Success', companyCategories);\r\n        debugger\r\n        runInAction(() => {\r\n            this.categories = companyCategories;\r\n        })\r\n        debugger\r\n    }\r\n\r\n    @action.bound\r\n    getItem = async () => {\r\n        debugger\r\n        const item = await Axios.get('http://localhost:3001/api/get/item/' + this.id);\r\n        console.log('Success', item);\r\n        debugger\r\n        runInAction(() => {\r\n            this.item = item;\r\n        })\r\n        debugger\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default EditItemViewStore;"]},"metadata":{},"sourceType":"module"}