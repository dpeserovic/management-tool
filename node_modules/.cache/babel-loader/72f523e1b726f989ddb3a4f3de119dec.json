{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const user = await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyId: values.companyId\n          });\n          console.log('Success', user);\n        } catch (error) {\n          this.form.invalidate(error.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const company = await Axios.post('http://localhost:3001/api/create/company', {\n            id: values.id,\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            address: values.address,\n            city: values.city\n          });\n          console.log('Success', company);\n        } catch (error) {\n          this.form.invalidate(error.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","form","values","console","log","user","post","email","password","companyId","error","invalidate","message","onError","companyForm","company","id","name","address","city"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAqCvBC,aArCuB,GAqCP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KAvCsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,IAAI,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,KAAK,EAAEL,MAAM,CAACK,KAAhB;AAAuBC,YAAAA,QAAQ,EAAEN,MAAM,CAACM,QAAxC;AAAkDC,YAAAA,SAAS,EAAEP,MAAM,CAACO;AAApE,WAApD,CAAnB;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,IAAvB;AACH,SAHD,CAGE,OAAOK,KAAP,EAAc;AACZ,eAAKT,IAAL,CAAUU,UAAV,CAAqBD,KAAK,CAACE,OAA3B;AACH;AACJ,OAVgC;AAWjCC,MAAAA,OAAO,EAAGZ,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAdgC,KAArB,CAAhB;AAiBA,SAAKY,WAAL,GAAmB,IAAIvB,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMa,OAAO,GAAG,MAAMvB,KAAK,CAACc,IAAN,CAAW,0CAAX,EAAuD;AAAEU,YAAAA,EAAE,EAAEd,MAAM,CAACc,EAAb;AAAiBT,YAAAA,KAAK,EAAEL,MAAM,CAACK,KAA/B;AAAsCC,YAAAA,QAAQ,EAAEN,MAAM,CAACM,QAAvD;AAAiES,YAAAA,IAAI,EAAEf,MAAM,CAACe,IAA9E;AAAoFC,YAAAA,OAAO,EAAEhB,MAAM,CAACgB,OAApG;AAA6GC,YAAAA,IAAI,EAAEjB,MAAM,CAACiB;AAA1H,WAAvD,CAAtB;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,OAAvB;AACH,SAHD,CAGE,OAAOL,KAAP,EAAc;AACZ,eAAKT,IAAL,CAAUU,UAAV,CAAqBD,KAAK,CAACE,OAA3B;AACH;AACJ,OAVsC;AAWvCC,MAAAA,OAAO,EAAGZ,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAdsC,KAAxB,CAAnB;AAgBH;;AApCmB;;AA2CxB,eAAeT,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const user = await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyId: values.companyId });\r\n                    console.log('Success', user);\r\n                } catch (error) {\r\n                    this.form.invalidate(error.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const company = await Axios.post('http://localhost:3001/api/create/company', { id: values.id, email: values.email, password: values.password, name: values.name, address: values.address, city: values.city });\r\n                    console.log('Success', company);\r\n                } catch (error) {\r\n                    this.form.invalidate(error.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}