{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _descriptor2, _temp;\n\nimport { action, observable, runInAction, computed } from 'mobx';\nimport { AddItemForm } from '../forms';\nimport Axios from 'axios';\nlet AddItemViewStore = (_dec = action.bound, (_class = (_temp = class AddItemViewStore {\n  get hasCategories() {\n    debugger;\n\n    if (this.categories.length > 0) {\n      debugger;\n      return true;\n    }\n\n    return false;\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"categories\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor2, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.form = new AddItemForm({\n      onSuccess: async form => {\n        const values = form.values();\n\n        try {} catch (error) {}\n      },\n      onError: form => {}\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"hasCategories\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"hasCategories\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      debugger;\n      const categories = await Axios.get('http://localhost:3001/api/get/categories');\n      runInAction(() => {\n        this.categories = categories;\n      });\n      debugger;\n    };\n  }\n})), _class));\nexport default AddItemViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/item/stores/AddItemViewStore.js"],"names":["action","observable","runInAction","computed","AddItemForm","Axios","AddItemViewStore","bound","hasCategories","categories","length","constructor","rootStore","navigateDashboard","routerStore","goTo","form","onSuccess","values","error","onError","get"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,MAA1D;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,gB,WA4BDN,MAAM,CAACO,K,qBA5BZ,MAAMD,gBAAN,CAAuB;AAInB,MACIE,aADJ,GACoB;AAChB;;AACA,QAAG,KAAKC,UAAL,CAAgBC,MAAhB,GAAyB,CAA5B,EAA+B;AAC3B;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA,SAwBvBC,iBAxBuB,GAwBH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KA1BsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,IAAL,GAAY,IAAIZ,WAAJ,CAAgB;AACxBa,MAAAA,SAAS,EAAE,MAAOD,IAAP,IAAgB;AACvB,cAAME,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;;AACA,YAAI,CACH,CADD,CACE,OAAOC,KAAP,EAAc,CACf;AACJ,OANuB;AAOxBC,MAAAA,OAAO,EAAGJ,IAAD,IAAU,CAClB;AARuB,KAAhB,CAAZ;AAUH;;AA1BkB,C,oFAClBf,U;;;;;WACY,I;;kEAEZE,Q;;;;;WAyBe,YAAY;AACxB;AACA,YAAMM,UAAU,GAAG,MAAMJ,KAAK,CAACgB,GAAN,CAAU,0CAAV,CAAzB;AACAnB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKO,UAAL,GAAkBA,UAAlB;AACH,OAFU,CAAX;AAGA;AACH,K;;;AAOL,eAAeH,gBAAf","sourcesContent":["import { action, observable, runInAction, computed } from 'mobx';\r\nimport { AddItemForm } from '../forms';\r\nimport Axios from 'axios';\r\n\r\nclass AddItemViewStore {\r\n    @observable\r\n    categories = null;\r\n\r\n    @computed\r\n    get hasCategories() {\r\n        debugger\r\n        if(this.categories.length > 0) {\r\n            debugger\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.form = new AddItemForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                try {\r\n                } catch (error) {\r\n                }\r\n            },\r\n            onError: (form) => {\r\n            }\r\n        });\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        debugger\r\n        const categories = await Axios.get('http://localhost:3001/api/get/categories');\r\n        runInAction(() => {\r\n            this.categories = categories;\r\n        })\r\n        debugger\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default AddItemViewStore;"]},"metadata":{},"sourceType":"module"}