{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, action, runInAction, computed } from 'mobx';\nimport Axios from 'axios';\nlet VirtualWarehouseViewStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class VirtualWarehouseViewStore {\n  get isOwner() {\n    if (this.person.hasOwnProperty('name')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"person\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"categories\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"items\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"getItems\", _descriptor5, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.person = JSON.parse(sessionStorage.getItem('person'));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"person\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"isOwner\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOwner\"), _class.prototype), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      debugger;\n      const categories = await Axios.get('http://localhost:3001/api/get/categories');\n      console.log('Success', categories);\n      debugger;\n      runInAction(() => {\n        this.categories = categories;\n      });\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"getItems\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      debugger;\n      const items = await Axios.get('http://localhost:3001/api/get/items');\n      console.log('Success', items);\n      debugger;\n      const companyItems = items.data.map(i => {\n        this.categories.data.filter(c => c.id == i.categoryId ? i.type = c.type : null);\n        return i;\n      });\n      debugger;\n      runInAction(() => {\n        this.items = companyItems;\n      });\n    };\n  }\n})), _class));\nexport default VirtualWarehouseViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/warehouse/stores/VirtualWarehouseViewStore.js"],"names":["observable","action","runInAction","computed","Axios","VirtualWarehouseViewStore","bound","isOwner","person","hasOwnProperty","constructor","rootStore","navigateDashboard","routerStore","goTo","JSON","parse","sessionStorage","getItem","categories","get","console","log","items","companyItems","data","map","i","filter","c","id","categoryId","type"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,MAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,yB,WAqBDJ,MAAM,CAACK,K,UAWPL,MAAM,CAACK,K,qBAhCZ,MAAMD,yBAAN,CAAgC;AAQ5B,MACIE,OADJ,GACc;AACV,QAAI,KAAKC,MAAL,CAAYC,cAAZ,CAA2B,MAA3B,CAAJ,EAAwC;AACpC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAgCvBC,iBAhCuB,GAgCH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KAlCsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKH,MAAL,GAAcO,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAX,CAAd;AACH;;AAnB2B,C,gFAC3BlB,U;;;;;8EAEAA,U;;;;;yEAEAA,U;;;;;4DAGAG,Q;;;;;WAce,YAAY;AACxB;AACA,YAAMgB,UAAU,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,0CAAV,CAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,UAAvB;AACA;AACAjB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKiB,UAAL,GAAkBA,UAAlB;AACH,OAFU,CAAX;AAGH,K;;;;;;;WAGU,YAAY;AACnB;AACA,YAAMI,KAAK,GAAG,MAAMnB,KAAK,CAACgB,GAAN,CAAU,qCAAV,CAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB;AACA;AACA,YAAMC,YAAY,GAAGD,KAAK,CAACE,IAAN,CAAWC,GAAX,CAAeC,CAAC,IAAI;AACrC,aAAKR,UAAL,CAAgBM,IAAhB,CAAqBG,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,EAAF,IAAQH,CAAC,CAACI,UAAV,GAAuBJ,CAAC,CAACK,IAAF,GAASH,CAAC,CAACG,IAAlC,GAAyC,IAA1E;AACA,eAAOL,CAAP;AACH,OAHoB,CAArB;AAIA;AACAzB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKqB,KAAL,GAAaC,YAAb;AACH,OAFU,CAAX;AAGH,K;;;AAOL,eAAenB,yBAAf","sourcesContent":["import { observable, action, runInAction, computed } from 'mobx';\r\nimport Axios from 'axios';\r\n\r\nclass VirtualWarehouseViewStore {\r\n    @observable\r\n    person;\r\n    @observable\r\n    categories;\r\n    @observable\r\n    items;\r\n\r\n    @computed\r\n    get isOwner() {\r\n        if (this.person.hasOwnProperty('name')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.person = JSON.parse(sessionStorage.getItem('person'));\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        debugger\r\n        const categories = await Axios.get('http://localhost:3001/api/get/categories');\r\n        console.log('Success', categories);\r\n        debugger\r\n        runInAction(() => {\r\n            this.categories = categories;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getItems = async () => {\r\n        debugger\r\n        const items = await Axios.get('http://localhost:3001/api/get/items');\r\n        console.log('Success', items);\r\n        debugger\r\n        const companyItems = items.data.map(i => {\r\n            this.categories.data.filter(c => c.id == i.categoryId ? i.type = c.type : null);\r\n            return i;\r\n        })\r\n        debugger\r\n        runInAction(() => {\r\n            this.items = companyItems;\r\n        })\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default VirtualWarehouseViewStore;"]},"metadata":{},"sourceType":"module"}