{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async userForm => {\n        const values = userForm.values();\n        console.log('Success', values);\n\n        try {\n          const user = await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyId: values.companyId\n          });\n          this.userForm.clear();\n          console.log('Success', user);\n          debugger;\n        } catch (error) {\n          this.userForm.invalidate(error.message);\n          this.rootStore.notificationStore.error(error.message);\n          debugger;\n        }\n      },\n      onError: userForm => {\n        const values = userForm.values();\n        console.log('Error', values);\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async companyForm => {\n        const values = companyForm.values();\n        console.log('Success', values);\n\n        try {\n          const company = await Axios.post('http://localhost:3001/api/create/company', {\n            id: values.id,\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            address: values.address,\n            city: values.city\n          });\n          this.companyForm.clear();\n          console.log('Success', company);\n        } catch (error) {\n          this.companyForm.invalidate(error.message);\n        }\n      },\n      onError: companyForm => {\n        const values = companyForm.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","values","console","log","user","post","email","password","companyId","clear","error","invalidate","message","notificationStore","onError","companyForm","company","id","name","address","city"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SA2CvBC,aA3CuB,GA2CP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KA7CsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AAEA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAOD,QAAP,IAAoB;AAC3B,cAAME,MAAM,GAAGF,QAAQ,CAACE,MAAT,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,IAAI,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,KAAK,EAAEL,MAAM,CAACK,KAAhB;AAAuBC,YAAAA,QAAQ,EAAEN,MAAM,CAACM,QAAxC;AAAkDC,YAAAA,SAAS,EAAEP,MAAM,CAACO;AAApE,WAApD,CAAnB;AACA,eAAKT,QAAL,CAAcU,KAAd;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,IAAvB;AACA;AACH,SALD,CAKE,OAAOM,KAAP,EAAc;AACZ,eAAKX,QAAL,CAAcY,UAAd,CAAyBD,KAAK,CAACE,OAA/B;AACA,eAAKjB,SAAL,CAAekB,iBAAf,CAAiCH,KAAjC,CAAuCA,KAAK,CAACE,OAA7C;AACA;AACH;AACJ,OAdgC;AAejCE,MAAAA,OAAO,EAAGf,QAAD,IAAc;AACnB,cAAME,MAAM,GAAGF,QAAQ,CAACE,MAAT,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAlBgC,KAArB,CAAhB;AAqBA,SAAKc,WAAL,GAAmB,IAAIxB,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAOe,WAAP,IAAuB;AAC9B,cAAMd,MAAM,GAAGc,WAAW,CAACd,MAAZ,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMe,OAAO,GAAG,MAAMxB,KAAK,CAACa,IAAN,CAAW,0CAAX,EAAuD;AAAEY,YAAAA,EAAE,EAAEhB,MAAM,CAACgB,EAAb;AAAiBX,YAAAA,KAAK,EAAEL,MAAM,CAACK,KAA/B;AAAsCC,YAAAA,QAAQ,EAAEN,MAAM,CAACM,QAAvD;AAAiEW,YAAAA,IAAI,EAAEjB,MAAM,CAACiB,IAA9E;AAAoFC,YAAAA,OAAO,EAAElB,MAAM,CAACkB,OAApG;AAA6GC,YAAAA,IAAI,EAAEnB,MAAM,CAACmB;AAA1H,WAAvD,CAAtB;AACA,eAAKL,WAAL,CAAiBN,KAAjB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBa,OAAvB;AACH,SAJD,CAIE,OAAON,KAAP,EAAc;AACZ,eAAKK,WAAL,CAAiBJ,UAAjB,CAA4BD,KAAK,CAACE,OAAlC;AACH;AACJ,OAXsC;AAYvCE,MAAAA,OAAO,EAAGC,WAAD,IAAiB;AACtB,cAAMd,MAAM,GAAGc,WAAW,CAACd,MAAZ,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAfsC,KAAxB,CAAnB;AAiBH;;AA1CmB;;AAiDxB,eAAeR,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (userForm) => {\r\n                const values = userForm.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const user = await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyId: values.companyId });\r\n                    this.userForm.clear();\r\n                    console.log('Success', user);\r\n                    debugger\r\n                } catch (error) {\r\n                    this.userForm.invalidate(error.message);\r\n                    this.rootStore.notificationStore.error(error.message);\r\n                    debugger\r\n                }\r\n            },\r\n            onError: (userForm) => {\r\n                const values = userForm.values();\r\n                console.log('Error', values);\r\n            }\r\n        });\r\n\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (companyForm) => {\r\n                const values = companyForm.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const company = await Axios.post('http://localhost:3001/api/create/company', { id: values.id, email: values.email, password: values.password, name: values.name, address: values.address, city: values.city });\r\n                    this.companyForm.clear();\r\n                    console.log('Success', company);\r\n                } catch (error) {\r\n                    this.companyForm.invalidate(error.message);\r\n                }\r\n            },\r\n            onError: (companyForm) => {\r\n                const values = companyForm.values();\r\n                console.log('Error', values);\r\n            }\r\n        });\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}