{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar match_url_1 = require(\"./match-url\");\n\nvar query_string_1 = require(\"query-string\");\n/*\n * Find a route that matches the URL to a pattern and extracts the components.\n *\n * Can be used to generate the initial routerState when initialising the RouterStore.\n *  e.g.\n *    const history = createBrowserHistory();\n      routerStore = new RouterStore(\n        rootStore,\n        routes,\n        notFound,\n        findMatchingRoute(history.location, routes)\n    );\n */\n\n\nexports.findMatchingRoute = function (location, routes) {\n  // Find the matching route\n  var matchingRoute = null;\n  var params = undefined;\n\n  for (var i = 0; i < routes.length; i++) {\n    var route = routes[i];\n    params = match_url_1.matchUrl(location.pathname, route.pattern);\n\n    if (params) {\n      matchingRoute = route;\n      break;\n    }\n  }\n\n  if (matchingRoute) {\n    return {\n      routeName: matchingRoute.name,\n      params: params,\n      queryParams: query_string_1.parse(location.search)\n    };\n  }\n};","map":{"version":3,"sources":["../../src/adapters/find-matching-route.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAGA;;;;;;;;;;;;;;;AAaa,OAAA,CAAA,iBAAA,GAAoB,UAC7B,QAD6B,EAE7B,MAF6B,EAEd;AAEf;AACA,MAAI,aAAa,GAAG,IAApB;AACA,MAAI,MAAM,GAAG,SAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACpC,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,IAAA,MAAM,GAAG,WAAA,CAAA,QAAA,CAAS,QAAQ,CAAC,QAAlB,EAA4B,KAAK,CAAC,OAAlC,CAAT;;AACA,QAAI,MAAJ,EAAY;AACR,MAAA,aAAa,GAAG,KAAhB;AACA;AACH;AACJ;;AACD,MAAI,aAAJ,EAAmB;AACf,WAAO;AACH,MAAA,SAAS,EAAE,aAAa,CAAC,IADtB;AAEH,MAAA,MAAM,EAAA,MAFH;AAGH,MAAA,WAAW,EAAE,cAAA,CAAA,KAAA,CAAM,QAAQ,CAAC,MAAf;AAHV,KAAP;AAKH;AACJ,CAtBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar match_url_1 = require(\"./match-url\");\nvar query_string_1 = require(\"query-string\");\n/*\n * Find a route that matches the URL to a pattern and extracts the components.\n *\n * Can be used to generate the initial routerState when initialising the RouterStore.\n *  e.g.\n *    const history = createBrowserHistory();\n      routerStore = new RouterStore(\n        rootStore,\n        routes,\n        notFound,\n        findMatchingRoute(history.location, routes)\n    );\n */\nexports.findMatchingRoute = function (location, routes) {\n    // Find the matching route\n    var matchingRoute = null;\n    var params = undefined;\n    for (var i = 0; i < routes.length; i++) {\n        var route = routes[i];\n        params = match_url_1.matchUrl(location.pathname, route.pattern);\n        if (params) {\n            matchingRoute = route;\n            break;\n        }\n    }\n    if (matchingRoute) {\n        return {\n            routeName: matchingRoute.name,\n            params: params,\n            queryParams: query_string_1.parse(location.search)\n        };\n    }\n};\n//# sourceMappingURL=find-matching-route.js.map"]},"metadata":{},"sourceType":"script"}