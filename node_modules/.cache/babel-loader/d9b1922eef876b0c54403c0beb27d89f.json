{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const users = await Axios.get('http://localhost:3001/api/get/users');\n          debugger;\n          await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyId: values.companyKey,\n            isOwner: 0\n          });\n        } catch (e) {\n          this.form.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const users = await Axios.get('http://localhost:3001/api/get/users');\n          debugger;\n          const key = \"dsaa\";\n          await Axios.post('http://localhost:3001/api/create/company', {\n            id: key,\n            email: values.email,\n            password: values.password,\n            companyName: values.companyName,\n            companyAddress: values.companyAddress,\n            companyCity: values.companyCity,\n            isOwner: 1\n          });\n        } catch (e) {\n          this.form.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","form","values","console","log","users","get","post","email","password","companyId","companyKey","isOwner","e","invalidate","message","onError","companyForm","key","id","companyName","companyAddress","companyCity"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAuCvBC,aAvCuB,GAuCP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KAzCsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,KAAK,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,qCAAV,CAApB;AACA;AACA,gBAAMd,KAAK,CAACe,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBC,YAAAA,QAAQ,EAAEP,MAAM,CAACO,QAAxC;AAAkDC,YAAAA,SAAS,EAAER,MAAM,CAACS,UAApE;AAAgFC,YAAAA,OAAO,EAAE;AAAzF,WAApD,CAAN;AACH,SAJD,CAIE,OAAOC,CAAP,EAAU;AACR,eAAKZ,IAAL,CAAUa,UAAV,CAAqBD,CAAC,CAACE,OAAvB;AACH;AACJ,OAXgC;AAYjCC,MAAAA,OAAO,EAAGf,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAfgC,KAArB,CAAhB;AAiBA,SAAKe,WAAL,GAAmB,IAAI1B,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,KAAK,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,qCAAV,CAApB;AACA;AACA,gBAAMY,GAAG,GAAG,MAAZ;AACA,gBAAM1B,KAAK,CAACe,IAAN,CAAW,0CAAX,EAAuD;AAAEY,YAAAA,EAAE,EAAED,GAAN;AAAWV,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAzB;AAAgCC,YAAAA,QAAQ,EAAEP,MAAM,CAACO,QAAjD;AAA2DW,YAAAA,WAAW,EAAElB,MAAM,CAACkB,WAA/E;AAA4FC,YAAAA,cAAc,EAAEnB,MAAM,CAACmB,cAAnH;AAAmIC,YAAAA,WAAW,EAAEpB,MAAM,CAACoB,WAAvJ;AAAoKV,YAAAA,OAAO,EAAE;AAA7K,WAAvD,CAAN;AACH,SALD,CAKE,OAAOC,CAAP,EAAU;AACR,eAAKZ,IAAL,CAAUa,UAAV,CAAqBD,CAAC,CAACE,OAAvB;AACH;AACJ,OAZsC;AAavCC,MAAAA,OAAO,EAAGf,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAhBsC,KAAxB,CAAnB;AAkBH;;AAtCmB;;AA6CxB,eAAeT,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const users = await Axios.get('http://localhost:3001/api/get/users');\r\n                    debugger\r\n                    await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyId: values.companyKey, isOwner: 0 })\r\n                } catch (e) {\r\n                    this.form.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const users = await Axios.get('http://localhost:3001/api/get/users');\r\n                    debugger\r\n                    const key = \"dsaa\"\r\n                    await Axios.post('http://localhost:3001/api/create/company', { id: key, email: values.email, password: values.password, companyName: values.companyName, companyAddress: values.companyAddress, companyCity: values.companyCity, isOwner: 1 })\r\n                } catch (e) {\r\n                    this.form.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}