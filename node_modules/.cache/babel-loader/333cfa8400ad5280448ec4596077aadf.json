{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async userForm => {\n        const values = userForm.values();\n        console.log('Success', values);\n\n        try {\n          const createUser = await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyId: values.companyId\n          });\n          console.log('Success', createUser);\n\n          if (!createUser.data.errno) {\n            this.rootStore.notificationStore.success('Success');\n            this.userForm.clear();\n          } else {\n            this.rootStore.notificationStore.error('Error');\n          }\n        } catch (error) {\n          this.userForm.invalidate(error.message);\n          this.rootStore.notificationStore.error(error.message);\n        }\n      },\n      onError: userForm => {\n        const values = userForm.values();\n        console.log('Error', values);\n        this.rootStore.notificationStore.error('Error');\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async companyForm => {\n        const values = companyForm.values();\n        console.log('Success', values);\n\n        try {\n          const createCompany = await Axios.post('http://localhost:3001/api/create/company', {\n            id: values.id,\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            address: values.address,\n            city: values.city\n          });\n          console.log('Success', createCompany);\n\n          if (!createCompany.data.errno) {\n            this.rootStore.notificationStore.success('Success');\n            this.companyForm.clear();\n          } else {\n            this.rootStore.notificationStore.error('Error');\n          }\n        } catch (error) {\n          this.companyForm.invalidate(error.message);\n          this.rootStore.notificationStore.error(error.message);\n        }\n      },\n      onError: companyForm => {\n        const values = companyForm.values();\n        console.log('Error', values);\n        this.rootStore.notificationStore.error('Error');\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","values","console","log","createUser","post","email","password","companyId","data","errno","notificationStore","success","clear","error","invalidate","message","onError","companyForm","createCompany","id","name","address","city"],"mappings":"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","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (userForm) => {\r\n                const values = userForm.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const createUser = await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyId: values.companyId });\r\n                    console.log('Success', createUser);\r\n                    if (!createUser.data.errno) {\r\n                        this.rootStore.notificationStore.success('Success');\r\n                        this.userForm.clear();\r\n                    }\r\n                    else {\r\n                        this.rootStore.notificationStore.error('Error');\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    this.userForm.invalidate(error.message);\r\n                    this.rootStore.notificationStore.error(error.message);\r\n                }\r\n            },\r\n            onError: (userForm) => {\r\n                const values = userForm.values();\r\n                console.log('Error', values);\r\n                this.rootStore.notificationStore.error('Error');\r\n            }\r\n        });\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (companyForm) => {\r\n                const values = companyForm.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const createCompany = await Axios.post('http://localhost:3001/api/create/company', { id: values.id, email: values.email, password: values.password, name: values.name, address: values.address, city: values.city });\r\n                    console.log('Success', createCompany);\r\n                    if(!createCompany.data.errno) {\r\n                        this.rootStore.notificationStore.success('Success');\r\n                        this.companyForm.clear();\r\n                    }\r\n                    else {\r\n                        this.rootStore.notificationStore.error('Error');\r\n                    }\r\n                } catch (error) {\r\n                    this.companyForm.invalidate(error.message);\r\n                    this.rootStore.notificationStore.error(error.message);\r\n                }\r\n            },\r\n            onError: (companyForm) => {\r\n                const values = companyForm.values();\r\n                console.log('Error', values);\r\n                this.rootStore.notificationStore.error('Error');\r\n            }\r\n        });\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}