{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nimport Axios from 'axios';\nlet AuthStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, (_class = (_temp = class AuthStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"isLoggedIn\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loggedInUser\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"logIn\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"logOut\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"checkUser\", _descriptor5, this);\n\n    this.rootStore = rootStore;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoggedIn\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loggedInUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"logIn\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async credentials => {\n      try {\n        const companies = await Axios.get('http://localhost:3001/api/get/companies');\n        const company = companies.data.find(c => c.email === credentials.email && c.password === credentials.password);\n        const users = await Axios.get('http://localhost:3001/api/get/users');\n        const user = users.data.find(u => u.email === credentials.email && u.password === credentials.password);\n        const person = company || user;\n\n        if (person) {\n          runInAction(() => {\n            this.isLoggedIn = true;\n            this.loggedInUser = person;\n          });\n          sessionStorage.setItem('person', JSON.stringify(this.loggedInUser));\n          this.rootStore.routerStore.goTo('dashboard');\n        } else {\n          this.rootStore.notificationStore.error('Error');\n        }\n      } catch (error) {\n        this.rootStore.notificationStore.error(error.message);\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"logOut\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.isLoggedIn = false;\n      this.loggedInUser = null;\n      sessionStorage.removeItem('person');\n      this.rootStore.routerStore.goTo('login');\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"checkUser\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      const person = JSON.parse(sessionStorage.getItem('person'));\n\n      if (person) {\n        this.isLoggedIn = true;\n        this.loggedInUser = person;\n        this.rootStore.routerStore.goTo('dashboard');\n      } else {\n        this.isLoggedIn = false;\n        this.loggedInUser = null;\n        this.rootStore.routerStore.goTo('login');\n      }\n    };\n  }\n})), _class));\nexport default AuthStore;","map":{"version":3,"sources":["D:/management-tool/src/client/common/stores/AuthStore.js"],"names":["observable","action","runInAction","Axios","AuthStore","bound","constructor","rootStore","credentials","companies","get","company","data","find","c","email","password","users","user","u","person","isLoggedIn","loggedInUser","sessionStorage","setItem","JSON","stringify","routerStore","goTo","notificationStore","error","message","removeItem","parse","getItem"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,S,WAUDH,MAAM,CAACI,K,UAyBPJ,MAAM,CAACI,K,UAQPJ,MAAM,CAACI,K,qBA3CZ,MAAMD,SAAN,CAAgB;AAMZE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AARW,C,oFACXP,U;;;;;WACY,K;;gFACZA,U;;;;;WACc,I;;;;;;;WAOP,MAAOQ,WAAP,IAAuB;AAC3B,UAAI;AACA,cAAMC,SAAS,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,yCAAV,CAAxB;AACA,cAAMC,OAAO,GAAGF,SAAS,CAACG,IAAV,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYP,WAAW,CAACO,KAAxB,IAAiCD,CAAC,CAACE,QAAF,KAAeR,WAAW,CAACQ,QAArF,CAAhB;AACA,cAAMC,KAAK,GAAG,MAAMd,KAAK,CAACO,GAAN,CAAU,qCAAV,CAApB;AACA,cAAMQ,IAAI,GAAGD,KAAK,CAACL,IAAN,CAAWC,IAAX,CAAgBM,CAAC,IAAIA,CAAC,CAACJ,KAAF,KAAYP,WAAW,CAACO,KAAxB,IAAiCI,CAAC,CAACH,QAAF,KAAeR,WAAW,CAACQ,QAAjF,CAAb;AACA,cAAMI,MAAM,GAAGT,OAAO,IAAIO,IAA1B;;AACA,YAAIE,MAAJ,EAAY;AACRlB,UAAAA,WAAW,CAAC,MAAM;AACd,iBAAKmB,UAAL,GAAkB,IAAlB;AACA,iBAAKC,YAAL,GAAoBF,MAApB;AACH,WAHU,CAAX;AAIAG,UAAAA,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiCC,IAAI,CAACC,SAAL,CAAe,KAAKJ,YAApB,CAAjC;AACA,eAAKf,SAAL,CAAeoB,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,SAPD,MAQK;AACD,eAAKrB,SAAL,CAAesB,iBAAf,CAAiCC,KAAjC,CAAuC,OAAvC;AACH;AACJ,OAjBD,CAkBA,OAAOA,KAAP,EAAc;AACV,aAAKvB,SAAL,CAAesB,iBAAf,CAAiCC,KAAjC,CAAuCA,KAAK,CAACC,OAA7C;AACH;AACJ,K;;;;;;;WAGQ,YAAY;AACjB,WAAKV,UAAL,GAAkB,KAAlB;AACA,WAAKC,YAAL,GAAoB,IAApB;AACAC,MAAAA,cAAc,CAACS,UAAf,CAA0B,QAA1B;AACA,WAAKzB,SAAL,CAAeoB,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,K;;;;;;;WAGW,MAAM;AACd,YAAMR,MAAM,GAAGK,IAAI,CAACQ,KAAL,CAAWV,cAAc,CAACW,OAAf,CAAuB,QAAvB,CAAX,CAAf;;AACA,UAAId,MAAJ,EAAY;AACR,aAAKC,UAAL,GAAkB,IAAlB;AACA,aAAKC,YAAL,GAAoBF,MAApB;AACA,aAAKb,SAAL,CAAeoB,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,OAJD,MAIO;AACH,aAAKP,UAAL,GAAkB,KAAlB;AACA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKf,SAAL,CAAeoB,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH;AACJ,K;;;AAGL,eAAexB,SAAf","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\nimport Axios from 'axios';\r\n\r\nclass AuthStore {\r\n    @observable\r\n    isLoggedIn = false;\r\n    @observable\r\n    loggedInUser = null;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @action.bound\r\n    logIn = async (credentials) => {\r\n        try {\r\n            const companies = await Axios.get('http://localhost:3001/api/get/companies');\r\n            const company = companies.data.find(c => c.email === credentials.email && c.password === credentials.password);\r\n            const users = await Axios.get('http://localhost:3001/api/get/users');\r\n            const user = users.data.find(u => u.email === credentials.email && u.password === credentials.password);\r\n            const person = company || user;\r\n            if (person) {\r\n                runInAction(() => {\r\n                    this.isLoggedIn = true;\r\n                    this.loggedInUser = person;\r\n                })\r\n                sessionStorage.setItem('person', JSON.stringify(this.loggedInUser));\r\n                this.rootStore.routerStore.goTo('dashboard');\r\n            }\r\n            else {\r\n                this.rootStore.notificationStore.error('Error');\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.rootStore.notificationStore.error(error.message);\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    logOut = async () => {\r\n        this.isLoggedIn = false;\r\n        this.loggedInUser = null;\r\n        sessionStorage.removeItem('person');\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n\r\n    @action.bound\r\n    checkUser = () => {\r\n        const person = JSON.parse(sessionStorage.getItem('person'));\r\n        if (person) {\r\n            this.isLoggedIn = true;\r\n            this.loggedInUser = person;\r\n            this.rootStore.routerStore.goTo('dashboard');\r\n        } else {\r\n            this.isLoggedIn = false;\r\n            this.loggedInUser = null;\r\n            this.rootStore.routerStore.goTo('login');\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthStore;"]},"metadata":{},"sourceType":"module"}