{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyId: values.companyKey,\n            isOwner: 0\n          }).then(() => {\n            console.log('Success!');\n          });\n        } catch (e) {\n          this.form.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {} catch (e) {\n          this.form.invalidate(e.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n      }\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","form","values","console","log","post","email","password","companyId","companyKey","isOwner","then","e","invalidate","message","onError","companyForm"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAwCvBC,aAxCuB,GAwCP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KA1CsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAMC,IAAN,IAAe;AACtB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACAV,UAAAA,KAAK,CAACa,IAAN,CAAW,uCAAX,EAAoD;AAChDC,YAAAA,KAAK,EAAEJ,MAAM,CAACI,KADkC;AAEhDC,YAAAA,QAAQ,EAAEL,MAAM,CAACK,QAF+B;AAGhDC,YAAAA,SAAS,EAAEN,MAAM,CAACO,UAH8B;AAIhDC,YAAAA,OAAO,EAAE;AAJuC,WAApD,EAKGC,IALH,CAKQ,MAAM;AACVR,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,WAPD;AAQH,SATD,CASE,OAAMQ,CAAN,EAAS;AACP,eAAKX,IAAL,CAAUY,UAAV,CAAqBD,CAAC,CAACE,OAAvB;AACH;AACJ,OAhBgC;AAiBjCC,MAAAA,OAAO,EAAGd,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AApBgC,KAArB,CAAhB;AAsBA,SAAKc,WAAL,GAAmB,IAAIzB,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAMC,IAAN,IAAe;AACtB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI,CACH,CADD,CACE,OAAMU,CAAN,EAAS;AACP,eAAKX,IAAL,CAAUY,UAAV,CAAqBD,CAAC,CAACE,OAAvB;AACH;AACJ,OARsC;AASvCC,MAAAA,OAAO,EAAGd,IAAD,IAAU;AACf,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACH;AAZsC,KAAxB,CAAnB;AAcH;;AAvCmB;;AA8CxB,eAAeT,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async(form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    Axios.post('http://localhost:3001/api/create/user', {\r\n                        email: values.email,\r\n                        password: values.password,\r\n                        companyId: values.companyKey,\r\n                        isOwner: 0\r\n                    }).then(() => {\r\n                        console.log('Success!');\r\n                    })\r\n                } catch(e) {\r\n                    this.form.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async(form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                } catch(e) {\r\n                    this.form.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}