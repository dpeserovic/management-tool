{"ast":null,"code":"import { RegisterUserForm } from '../forms';\nimport { RegisterCompanyForm } from '../forms';\nimport Axios from 'axios';\n\nclass RegisterViewStore {\n  constructor(rootStore) {\n    this.navigateLogin = () => {\n      this.rootStore.routerStore.goTo('login');\n    };\n\n    this.rootStore = rootStore;\n    this.userForm = new RegisterUserForm({\n      onSuccess: async form => {\n        const values = form.values();\n\n        try {\n          const companies = await Axios.get('http://localhost:3001/api/get/companies');\n          const isValidKey = companies.data.find(k => k.key === values.companyKey);\n          isValidKey && (await Axios.post('http://localhost:3001/api/create/user', {\n            email: values.email,\n            password: values.password,\n            companyKey: values.companyKey\n          }));\n        } catch (e) {\n          this.userForm.invalidate(e.message);\n        }\n      },\n      onError: form => {}\n    });\n    this.companyForm = new RegisterCompanyForm({\n      onSuccess: async form => {\n        const values = form.values();\n\n        try {\n          const company = await Axios.post('http://localhost:3001/api/create/company', {\n            id: values.id,\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            address: values.address,\n            city: values.city\n          });\n        } catch (e) {\n          this.companyForm.invalidate(e.message);\n        }\n      },\n      onError: form => {}\n    });\n  }\n\n}\n\nexport default RegisterViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/membership/stores/RegisterViewStore.js"],"names":["RegisterUserForm","RegisterCompanyForm","Axios","RegisterViewStore","constructor","rootStore","navigateLogin","routerStore","goTo","userForm","onSuccess","form","values","companies","get","isValidKey","data","find","k","key","companyKey","post","email","password","e","invalidate","message","onError","companyForm","company","id","name","address","city"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SA8BvBC,aA9BuB,GA8BP,MAAM;AAClB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,OAAhC;AACH,KAhCsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgB,IAAIT,gBAAJ,CAAqB;AACjCU,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;;AACA,YAAI;AACA,gBAAMC,SAAS,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,yCAAV,CAAxB;AACA,gBAAMC,UAAU,GAAGF,SAAS,CAACG,IAAV,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACQ,UAA1C,CAAnB;AACAL,UAAAA,UAAU,KAAI,MAAMb,KAAK,CAACmB,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,KAAK,EAAEV,MAAM,CAACU,KAAhB;AAAuBC,YAAAA,QAAQ,EAAEX,MAAM,CAACW,QAAxC;AAAkDH,YAAAA,UAAU,EAAER,MAAM,CAACQ;AAArE,WAApD,CAAV,CAAV;AACH,SAJD,CAIE,OAAOI,CAAP,EAAU;AACR,eAAKf,QAAL,CAAcgB,UAAd,CAAyBD,CAAC,CAACE,OAA3B;AACH;AACJ,OAVgC;AAWjCC,MAAAA,OAAO,EAAGhB,IAAD,IAAU,CAClB;AAZgC,KAArB,CAAhB;AAcA,SAAKiB,WAAL,GAAmB,IAAI3B,mBAAJ,CAAwB;AACvCS,MAAAA,SAAS,EAAE,MAAOC,IAAP,IAAgB;AACvB,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;;AACA,YAAI;AACA,gBAAMiB,OAAO,GAAG,MAAM3B,KAAK,CAACmB,IAAN,CAAW,0CAAX,EAAuD;AAAES,YAAAA,EAAE,EAAElB,MAAM,CAACkB,EAAb;AAAiBR,YAAAA,KAAK,EAAEV,MAAM,CAACU,KAA/B;AAAsCC,YAAAA,QAAQ,EAAEX,MAAM,CAACW,QAAvD;AAAiEQ,YAAAA,IAAI,EAAEnB,MAAM,CAACmB,IAA9E;AAAoFC,YAAAA,OAAO,EAAEpB,MAAM,CAACoB,OAApG;AAA6GC,YAAAA,IAAI,EAAErB,MAAM,CAACqB;AAA1H,WAAvD,CAAtB;AACH,SAFD,CAEE,OAAOT,CAAP,EAAU;AACR,eAAKI,WAAL,CAAiBH,UAAjB,CAA4BD,CAAC,CAACE,OAA9B;AACH;AACJ,OARsC;AASvCC,MAAAA,OAAO,EAAGhB,IAAD,IAAU,CAClB;AAVsC,KAAxB,CAAnB;AAYH;;AA7BmB;;AAoCxB,eAAeR,iBAAf","sourcesContent":["import { RegisterUserForm } from '../forms';\r\nimport { RegisterCompanyForm } from '../forms';\r\nimport Axios from 'axios';\r\nclass RegisterViewStore {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.userForm = new RegisterUserForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                try {\r\n                    const companies = await Axios.get('http://localhost:3001/api/get/companies');\r\n                    const isValidKey = companies.data.find(k => k.key === values.companyKey);\r\n                    isValidKey && await Axios.post('http://localhost:3001/api/create/user', { email: values.email, password: values.password, companyKey: values.companyKey });\r\n                } catch (e) {\r\n                    this.userForm.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n            }\r\n        })\r\n        this.companyForm = new RegisterCompanyForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                try {\r\n                    const company = await Axios.post('http://localhost:3001/api/create/company', { id: values.id, email: values.email, password: values.password, name: values.name, address: values.address, city: values.city })\r\n                } catch (e) {\r\n                    this.companyForm.invalidate(e.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n            }\r\n        })\r\n    }\r\n\r\n    navigateLogin = () => {\r\n        this.rootStore.routerStore.goTo('login');\r\n    }\r\n}\r\n\r\nexport default RegisterViewStore;"]},"metadata":{},"sourceType":"module"}