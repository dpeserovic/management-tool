{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nimport { EditItemForm } from '../forms';\nimport Axios from 'axios';\nlet EditItemViewStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class EditItemViewStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"categories\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"item\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getItem\", _descriptor4, this);\n\n    this.navigateVirtualWarehouse = () => {\n      this.rootStore.routerStore.goTo('virtualWarehouse');\n    };\n\n    this.rootStore = rootStore;\n    this.itemId = this.rootStore.routerStore.router.routerState.params.id;\n    this.form = new EditItemForm({\n      onInit: async () => {\n        await this.getCategories();\n        await this.getItem();\n        this.form.set('value', {\n          name: this.item.data[0].name,\n          categoryId: this.item.data[0].categoryId\n        });\n      },\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const editItem = await Axios.post('http://localhost:3001/api/edit/item/' + this.itemId, {\n            name: values.name,\n            categoryId: values.categoryId\n          });\n          console.log('Success', editItem);\n          !editItem.data.errno ? this.rootStore.notificationStore.success('Success') : this.rootStore.notificationStore.error('Error');\n        } catch (error) {\n          this.form.invalidate(error.message);\n          this.rootStore.notificationStore.error(error.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n        this.rootStore.notificationStore.error('Error');\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"item\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const getCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.id);\n      console.log('Success', getCategories);\n      runInAction(() => {\n        this.categories = getCategories;\n      });\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getItem\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const getItems = await Axios.get('http://localhost:3001/api/get/item/' + this.itemId);\n      console.log('Success', getItems);\n      runInAction(() => {\n        this.item = getItems;\n      });\n    };\n  }\n})), _class));\nexport default EditItemViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/item/stores/ItemLogsViewStore.js"],"names":["observable","action","runInAction","EditItemForm","Axios","EditItemViewStore","bound","constructor","rootStore","navigateVirtualWarehouse","routerStore","goTo","itemId","router","routerState","params","id","form","onInit","getCategories","getItem","set","name","item","data","categoryId","onSuccess","values","console","log","editItem","post","errno","notificationStore","success","error","invalidate","message","onError","get","authStore","loggedInUser","categories","getItems"],"mappings":"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","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\nimport { EditItemForm } from '../forms'\r\nimport Axios from 'axios';\r\n\r\nclass EditItemViewStore {\r\n    @observable\r\n    categories;\r\n    @observable\r\n    item;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.itemId = this.rootStore.routerStore.router.routerState.params.id;\r\n        this.form = new EditItemForm({\r\n            onInit: async () => {\r\n                await this.getCategories();\r\n                await this.getItem();\r\n                this.form.set('value', { name: this.item.data[0].name, categoryId: this.item.data[0].categoryId })\r\n            },\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const editItem = await Axios.post('http://localhost:3001/api/edit/item/' + this.itemId, { name: values.name, categoryId: values.categoryId });\r\n                    console.log('Success', editItem);\r\n                    !editItem.data.errno ? this.rootStore.notificationStore.success('Success') : this.rootStore.notificationStore.error('Error');\r\n                } catch (error) {\r\n                    this.form.invalidate(error.message);\r\n                    this.rootStore.notificationStore.error(error.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n                this.rootStore.notificationStore.error('Error');\r\n            }\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        const getCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.id);\r\n        console.log('Success', getCategories);\r\n        runInAction(() => {\r\n            this.categories = getCategories;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getItem = async () => {\r\n        const getItems = await Axios.get('http://localhost:3001/api/get/item/' + this.itemId);\r\n        console.log('Success', getItems);\r\n        runInAction(() => {\r\n            this.item = getItems;\r\n        })\r\n    }\r\n\r\n    navigateVirtualWarehouse = () => {\r\n        this.rootStore.routerStore.goTo('virtualWarehouse');\r\n    }\r\n}\r\n\r\nexport default EditItemViewStore;"]},"metadata":{},"sourceType":"module"}