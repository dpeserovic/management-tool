{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { observable, action, runInAction, computed } from 'mobx';\nimport { MyProfileForm } from '../forms';\nimport Axios from 'axios';\nlet MyProfileViewStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, (_class = (_temp = class MyProfileViewStore {\n  get isOwner() {\n    if (this.rootStore.authStore.loggedInUser.hasOwnProperty('name')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"users\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"items\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"categories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getUsers\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"getItems\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor6, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    const {\n      loggedInUser\n    } = this.rootStore.authStore;\n    this.companyId = loggedInUser.hasOwnProperty('name') ? loggedInUser.id : loggedInUser.companyId;\n    this.form = new MyProfileForm();\n\n    if (this.rootStore.authStore.loggedInUser.hasOwnProperty('name')) {\n      this.form.set('value', {\n        id: loggedInUser.id,\n        email: loggedInUser.email,\n        password: loggedInUser.password,\n        name: loggedInUser.name,\n        address: loggedInUser.address,\n        city: loggedInUser.city\n      });\n    } else {\n      this.form.set('value', {\n        id: loggedInUser.id,\n        email: loggedInUser.email,\n        password: loggedInUser.password,\n        companyId: loggedInUser.companyId\n      });\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"users\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"isOwner\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOwner\"), _class.prototype), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getUsers\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const getUsers = await Axios.get('http://localhost:3001/api/get/users/' + this.companyId);\n      console.log('Success', getUsers);\n      runInAction(() => {\n        this.users = getUsers;\n      });\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"getItems\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const getItems = await Axios.get('http://localhost:3001/api/get/all-items/' + this.companyId);\n      console.log('Success', getItems);\n      runInAction(() => {\n        this.items = getItems;\n      });\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const getCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\n      console.log('Success', getCategories);\n      runInAction(() => {\n        this.categories = getCategories;\n      });\n    };\n  }\n})), _class));\nexport default MyProfileViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/profile/stores/MyProfileViewStore.js"],"names":["observable","action","runInAction","computed","MyProfileForm","Axios","MyProfileViewStore","bound","isOwner","rootStore","authStore","loggedInUser","hasOwnProperty","constructor","navigateDashboard","routerStore","goTo","companyId","id","form","set","email","password","name","address","city","getUsers","get","console","log","users","getItems","items","getCategories","categories"],"mappings":"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","sourcesContent":["import { observable, action, runInAction, computed } from 'mobx';\r\nimport { MyProfileForm } from '../forms';\r\nimport Axios from 'axios';\r\n\r\nclass MyProfileViewStore {\r\n    @observable users;\r\n    @observable items;\r\n    @observable categories;\r\n\r\n    @computed\r\n    get isOwner() {\r\n        if (this.rootStore.authStore.loggedInUser.hasOwnProperty('name')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        const { loggedInUser } = this.rootStore.authStore;\r\n        this.companyId = loggedInUser.hasOwnProperty('name') ? loggedInUser.id : loggedInUser.companyId;\r\n        this.form = new MyProfileForm();\r\n        if (this.rootStore.authStore.loggedInUser.hasOwnProperty('name')) {\r\n            this.form.set('value', { id: loggedInUser.id, email: loggedInUser.email, password: loggedInUser.password, name: loggedInUser.name, address: loggedInUser.address, city: loggedInUser.city });\r\n        }\r\n        else {\r\n            this.form.set('value', { id: loggedInUser.id, email: loggedInUser.email, password: loggedInUser.password, companyId: loggedInUser.companyId });\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    getUsers = async () =>{\r\n        const getUsers = await Axios.get('http://localhost:3001/api/get/users/' + this.companyId);\r\n        console.log('Success', getUsers);\r\n        runInAction(() => {\r\n            this.users = getUsers;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getItems = async () =>{\r\n        const getItems = await Axios.get('http://localhost:3001/api/get/all-items/' + this.companyId);\r\n        console.log('Success', getItems);\r\n        runInAction(() => {\r\n            this.items = getItems;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () =>{\r\n        const getCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\r\n        console.log('Success', getCategories);\r\n        runInAction(() => {\r\n            this.categories = getCategories;\r\n        })\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default MyProfileViewStore;"]},"metadata":{},"sourceType":"module"}