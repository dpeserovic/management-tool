{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { observable, action, runInAction, computed } from 'mobx';\nimport Axios from 'axios';\nlet VirtualWarehouseViewStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class VirtualWarehouseViewStore {\n  get isOwner() {\n    if (this.person.hasOwnProperty('name')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"person\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"companyId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"categories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"items\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"getItems\", _descriptor6, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.person = JSON.parse(sessionStorage.getItem('person'));\n    this.companyId = this.person.hasOwnProperty('name') ? this.person.id : this.person.companyId;\n    this.tableStore = null;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"person\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"companyId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"isOwner\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOwner\"), _class.prototype), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\n      console.log('Success', companyCategories);\n      runInAction(() => {\n        this.categories = companyCategories;\n      });\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"getItems\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const companyItems = await Axios.get('http://localhost:3001/api/get/items/' + this.companyId);\n      console.log('Success', companyItems);\n      companyItems.data = companyItems.data.map(i => {\n        this.categories.data.filter(c => c.id === i.categoryId ? i.type = c.type : null);\n        return i;\n      });\n      runInAction(() => {\n        this.items = companyItems;\n      });\n      this.tableStore = {\n        columns: ['Item name', 'Item category', 'Borrow', 'Edit', 'Delete'],\n        data: this.items,\n        actions: {\n          onBorrow: () => {},\n          onEdit: () => {},\n          onDelete: () => {}\n        }\n      };\n      debugger;\n    };\n  }\n})), _class));\nexport default VirtualWarehouseViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/warehouse/stores/VirtualWarehouseViewStore.js"],"names":["observable","action","runInAction","computed","Axios","VirtualWarehouseViewStore","bound","isOwner","person","hasOwnProperty","constructor","rootStore","navigateDashboard","routerStore","goTo","JSON","parse","sessionStorage","getItem","companyId","id","tableStore","companyCategories","get","console","log","categories","companyItems","data","map","i","filter","c","categoryId","type","items","columns","actions","onBorrow","onEdit","onDelete"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,MAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,yB,WAyBDJ,MAAM,CAACK,K,UASPL,MAAM,CAACK,K,qBAlCZ,MAAMD,yBAAN,CAAgC;AAU5B,MACIE,OADJ,GACc;AACV,QAAI,KAAKC,MAAL,CAAYC,cAAZ,CAA2B,MAA3B,CAAJ,EAAwC;AACpC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SA6CvBC,iBA7CuB,GA6CH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KA/CsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKH,MAAL,GAAcO,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAX,CAAd;AACA,SAAKC,SAAL,GAAiB,KAAKX,MAAL,CAAYC,cAAZ,CAA2B,MAA3B,IAAqC,KAAKD,MAAL,CAAYY,EAAjD,GAAsD,KAAKZ,MAAL,CAAYW,SAAnF;AACA,SAAKE,UAAL,GAAkB,IAAlB;AACH;;AAvB2B,C,gFAC3BrB,U;;;;;6EAEAA,U;;;;;8EAEAA,U;;;;;yEAEAA,U;;;;;4DAGAG,Q;;;;;WAgBe,YAAY;AACxB,YAAMmB,iBAAiB,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAU,8CAA8C,KAAKJ,SAA7D,CAAhC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,iBAAvB;AACApB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKwB,UAAL,GAAkBJ,iBAAlB;AACH,OAFU,CAAX;AAGH,K;;;;;;;WAGU,YAAY;AACnB,YAAMK,YAAY,GAAG,MAAMvB,KAAK,CAACmB,GAAN,CAAU,yCAAyC,KAAKJ,SAAxD,CAA3B;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,YAAvB;AACAA,MAAAA,YAAY,CAACC,IAAb,GAAoBD,YAAY,CAACC,IAAb,CAAkBC,GAAlB,CAAsBC,CAAC,IAAI;AAC3C,aAAKJ,UAAL,CAAgBE,IAAhB,CAAqBG,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACZ,EAAF,KAASU,CAAC,CAACG,UAAX,GAAwBH,CAAC,CAACI,IAAF,GAASF,CAAC,CAACE,IAAnC,GAA0C,IAA3E;AACA,eAAOJ,CAAP;AACH,OAHmB,CAApB;AAIA5B,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKiC,KAAL,GAAaR,YAAb;AACH,OAFU,CAAX;AAGA,WAAKN,UAAL,GAAkB;AACde,QAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,eAAd,EAA+B,QAA/B,EAAyC,MAAzC,EAAiD,QAAjD,CADK;AAEdR,QAAAA,IAAI,EAAE,KAAKO,KAFG;AAGdE,QAAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAE,MAAM,CAEf,CAHI;AAILC,UAAAA,MAAM,EAAE,MAAM,CAEb,CANI;AAOLC,UAAAA,QAAQ,EAAE,MAAM,CAEf;AATI;AAHK,OAAlB;AAeA;AACH,K;;;AAOL,eAAenC,yBAAf","sourcesContent":["import { observable, action, runInAction, computed } from 'mobx';\r\nimport Axios from 'axios';\r\n\r\nclass VirtualWarehouseViewStore {\r\n    @observable\r\n    person;\r\n    @observable\r\n    companyId;\r\n    @observable\r\n    categories;\r\n    @observable\r\n    items;\r\n\r\n    @computed\r\n    get isOwner() {\r\n        if (this.person.hasOwnProperty('name')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.person = JSON.parse(sessionStorage.getItem('person'));\r\n        this.companyId = this.person.hasOwnProperty('name') ? this.person.id : this.person.companyId;\r\n        this.tableStore = null;\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\r\n        console.log('Success', companyCategories);\r\n        runInAction(() => {\r\n            this.categories = companyCategories;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getItems = async () => {\r\n        const companyItems = await Axios.get('http://localhost:3001/api/get/items/' + this.companyId);\r\n        console.log('Success', companyItems);\r\n        companyItems.data = companyItems.data.map(i => {\r\n            this.categories.data.filter(c => c.id === i.categoryId ? i.type = c.type : null);\r\n            return i;\r\n        })\r\n        runInAction(() => {\r\n            this.items = companyItems;\r\n        })\r\n        this.tableStore = {\r\n            columns: ['Item name', 'Item category', 'Borrow', 'Edit', 'Delete'],\r\n            data: this.items,\r\n            actions: {\r\n                onBorrow: () => {\r\n\r\n                },\r\n                onEdit: () => {\r\n\r\n                },\r\n                onDelete: () => {\r\n\r\n                }\r\n            }\r\n        }\r\n        debugger\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default VirtualWarehouseViewStore;"]},"metadata":{},"sourceType":"module"}