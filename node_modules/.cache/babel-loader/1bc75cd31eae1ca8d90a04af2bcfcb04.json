{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nimport Axios from 'axios';\nlet MyBackpackViewStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class MyBackpackViewStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"categories\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"items\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getItems\", _descriptor4, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.actions = {\n      returnItem: async id => {\n        try {\n          const returnItem = await Axios.post('http://localhost:3001/api/return/item/' + id);\n          console.log('Success', returnItem);\n\n          if (!returnItem.data.errno) {\n            await this.getItems();\n            this.rootStore.notificationStore.success('Success');\n          } else {\n            this.rootStore.notificationStore.error('Error');\n          }\n        } catch (error) {\n          this.rootStore.notificationStore.error(error.message);\n        }\n      }\n    };\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.companyId);\n      console.log('Success', companyCategories);\n      runInAction(() => {\n        this.categories = companyCategories;\n      });\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getItems\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const companyItems = await Axios.get('http://localhost:3001/api/get/user-items/' + this.rootStore.authStore.loggedInUser.id);\n      console.log('Success', companyItems);\n      companyItems.data = companyItems.data.map(i => {\n        this.categories.data.filter(c => c.id === i.categoryId ? i.type = c.type : null);\n        return i;\n      });\n      runInAction(() => {\n        this.items = companyItems;\n      });\n    };\n  }\n})), _class));\nexport default MyBackpackViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/backpack/stores/MyBackpackViewStore.js"],"names":["observable","action","runInAction","Axios","MyBackpackViewStore","bound","constructor","rootStore","navigateDashboard","routerStore","goTo","actions","returnItem","id","post","console","log","data","errno","getItems","notificationStore","success","error","message","companyCategories","get","authStore","loggedInUser","companyId","categories","companyItems","map","i","filter","c","categoryId","type","items"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,mB,WA6BDH,MAAM,CAACI,K,UASPJ,MAAM,CAACI,K,qBAtCZ,MAAMD,mBAAN,CAA0B;AAMtBE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SA6CvBC,iBA7CuB,GA6CH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KA/CsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,OAAL,GAAe;AACXC,MAAAA,UAAU,EAAE,MAAOC,EAAP,IAAc;AACtB,YAAI;AACA,gBAAMD,UAAU,GAAG,MAAMT,KAAK,CAACW,IAAN,CAAW,2CAA2CD,EAAtD,CAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,UAAvB;;AACA,cAAG,CAACA,UAAU,CAACK,IAAX,CAAgBC,KAApB,EAA2B;AACvB,kBAAM,KAAKC,QAAL,EAAN;AACA,iBAAKZ,SAAL,CAAea,iBAAf,CAAiCC,OAAjC,CAAyC,SAAzC;AACH,WAHD,MAIK;AACD,iBAAKd,SAAL,CAAea,iBAAf,CAAiCE,KAAjC,CAAuC,OAAvC;AACH;AAEJ,SAXD,CAYA,OAAOA,KAAP,EAAc;AACV,eAAKf,SAAL,CAAea,iBAAf,CAAiCE,KAAjC,CAAuCA,KAAK,CAACC,OAA7C;AACH;AACJ;AAjBU,KAAf;AAmBH;;AA3BqB,C,oFACrBvB,U;;;;;yEAEAA,U;;;;;;;;;;WA2Be,YAAY;AACxB,YAAMwB,iBAAiB,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAU,8CAA8C,KAAKlB,SAAL,CAAemB,SAAf,CAAyBC,YAAzB,CAAsCC,SAA9F,CAAhC;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,iBAAvB;AACAtB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAK2B,UAAL,GAAkBL,iBAAlB;AACH,OAFU,CAAX;AAGH,K;;;;;;;WAGU,YAAY;AACnB,YAAMM,YAAY,GAAG,MAAM3B,KAAK,CAACsB,GAAN,CAAU,8CAA8C,KAAKlB,SAAL,CAAemB,SAAf,CAAyBC,YAAzB,CAAsCd,EAA9F,CAA3B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBc,YAAvB;AACAA,MAAAA,YAAY,CAACb,IAAb,GAAoBa,YAAY,CAACb,IAAb,CAAkBc,GAAlB,CAAsBC,CAAC,IAAI;AAC3C,aAAKH,UAAL,CAAgBZ,IAAhB,CAAqBgB,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACrB,EAAF,KAASmB,CAAC,CAACG,UAAX,GAAwBH,CAAC,CAACI,IAAF,GAASF,CAAC,CAACE,IAAnC,GAA0C,IAA3E;AACA,eAAOJ,CAAP;AACH,OAHmB,CAApB;AAIA9B,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKmC,KAAL,GAAaP,YAAb;AACH,OAFU,CAAX;AAGH,K;;;AAOL,eAAe1B,mBAAf","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\nimport Axios from 'axios';\r\n\r\nclass MyBackpackViewStore {\r\n    @observable\r\n    categories;\r\n    @observable\r\n    items;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.actions = {\r\n            returnItem: async (id) => {\r\n                try {\r\n                    const returnItem = await Axios.post('http://localhost:3001/api/return/item/' + id);\r\n                    console.log('Success', returnItem);\r\n                    if(!returnItem.data.errno) {\r\n                        await this.getItems();\r\n                        this.rootStore.notificationStore.success('Success');\r\n                    }\r\n                    else {\r\n                        this.rootStore.notificationStore.error('Error');\r\n                    }\r\n                    \r\n                }\r\n                catch (error) {\r\n                    this.rootStore.notificationStore.error(error.message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.rootStore.authStore.loggedInUser.companyId);\r\n        console.log('Success', companyCategories);\r\n        runInAction(() => {\r\n            this.categories = companyCategories;\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getItems = async () => {\r\n        const companyItems = await Axios.get('http://localhost:3001/api/get/user-items/' + this.rootStore.authStore.loggedInUser.id);\r\n        console.log('Success', companyItems);\r\n        companyItems.data = companyItems.data.map(i => {\r\n            this.categories.data.filter(c => c.id === i.categoryId ? i.type = c.type : null);\r\n            return i;\r\n        })\r\n        runInAction(() => {\r\n            this.items = companyItems;\r\n        })\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default MyBackpackViewStore;"]},"metadata":{},"sourceType":"module"}