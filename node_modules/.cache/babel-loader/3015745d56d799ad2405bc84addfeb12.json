{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\management-tool\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction } from 'mobx';\nimport { AddItemForm } from '../forms';\nimport Axios from 'axios';\nlet AddItemViewStore = (_dec = action.bound, (_class = (_temp = class AddItemViewStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"person\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"companyId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"categories\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getCategories\", _descriptor4, this);\n\n    this.navigateDashboard = () => {\n      this.rootStore.routerStore.goTo('dashboard');\n    };\n\n    this.rootStore = rootStore;\n    this.person = JSON.parse(sessionStorage.getItem('person'));\n    this.companyId = this.person.id;\n    this.form = new AddItemForm({\n      onSuccess: async form => {\n        const values = form.values();\n        console.log('Success', values);\n\n        try {\n          const createItem = await Axios.post('http://localhost:3001/api/create/item', {\n            name: values.name,\n            companyId: this.companyId,\n            categoryId: values.categoryId\n          });\n          this.form.clear();\n          console.log('Success', createItem);\n          !createItem.data.errno ? this.rootStore.notificationStore.success('Success') : this.rootStore.notificationStore.error('Error');\n        } catch (error) {\n          this.form.invalidate(error.message);\n          this.rootStore.notificationStore.success(error.message);\n        }\n      },\n      onError: form => {\n        const values = form.values();\n        console.log('Error', values);\n        this.rootStore.notificationStore.error('Error');\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"person\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"companyId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"categories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getCategories\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\n      console.log('Success', companyCategories);\n      runInAction(() => {\n        this.categories = companyCategories;\n      });\n    };\n  }\n})), _class));\nexport default AddItemViewStore;","map":{"version":3,"sources":["D:/management-tool/src/client/modules/item/stores/AddItemViewStore.js"],"names":["observable","action","runInAction","AddItemForm","Axios","AddItemViewStore","bound","constructor","rootStore","navigateDashboard","routerStore","goTo","person","JSON","parse","sessionStorage","getItem","companyId","id","form","onSuccess","values","console","log","createItem","post","name","categoryId","clear","data","errno","notificationStore","success","error","invalidate","message","onError","companyCategories","get","categories"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,gB,WAmCDJ,MAAM,CAACK,K,qBAnCZ,MAAMD,gBAAN,CAAuB;AAQnBE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAoCvBC,iBApCuB,GAoCH,MAAM;AACtB,WAAKD,SAAL,CAAeE,WAAf,CAA2BC,IAA3B,CAAgC,WAAhC;AACH,KAtCsB;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKI,MAAL,GAAcC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAX,CAAd;AACA,SAAKC,SAAL,GAAiB,KAAKL,MAAL,CAAYM,EAA7B;AAEA,SAAKC,IAAL,GAAY,IAAIhB,WAAJ,CAAgB;AACxBiB,MAAAA,SAAS,EAAE,MAAOD,IAAP,IAAgB;AACvB,cAAME,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,YAAI;AACA,gBAAMG,UAAU,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAW,uCAAX,EAAoD;AAAEC,YAAAA,IAAI,EAAEL,MAAM,CAACK,IAAf;AAAqBT,YAAAA,SAAS,EAAE,KAAKA,SAArC;AAAgDU,YAAAA,UAAU,EAAEN,MAAM,CAACM;AAAnE,WAApD,CAAzB;AACA,eAAKR,IAAL,CAAUS,KAAV;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,UAAvB;AACA,WAACA,UAAU,CAACK,IAAX,CAAgBC,KAAjB,GAAyB,KAAKtB,SAAL,CAAeuB,iBAAf,CAAiCC,OAAjC,CAAyC,SAAzC,CAAzB,GAA+E,KAAKxB,SAAL,CAAeuB,iBAAf,CAAiCE,KAAjC,CAAuC,OAAvC,CAA/E;AACH,SALD,CAKE,OAAOA,KAAP,EAAc;AACZ,eAAKd,IAAL,CAAUe,UAAV,CAAqBD,KAAK,CAACE,OAA3B;AACA,eAAK3B,SAAL,CAAeuB,iBAAf,CAAiCC,OAAjC,CAAyCC,KAAK,CAACE,OAA/C;AACH;AACJ,OAbuB;AAcxBC,MAAAA,OAAO,EAAGjB,IAAD,IAAU;AACf,cAAME,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACA,aAAKb,SAAL,CAAeuB,iBAAf,CAAiCE,KAAjC,CAAuC,OAAvC;AACH;AAlBuB,KAAhB,CAAZ;AAoBH;;AAjCkB,C,gFAClBjC,U;;;;;6EAEAA,U;;;;;8EAEAA,U;;;;;;;;;;WA+Be,YAAY;AACxB,YAAMqC,iBAAiB,GAAG,MAAMjC,KAAK,CAACkC,GAAN,CAAU,8CAA8C,KAAKrB,SAA7D,CAAhC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBc,iBAAvB;AACAnC,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKqC,UAAL,GAAkBF,iBAAlB;AACH,OAFU,CAAX;AAGH,K;;;AAOL,eAAehC,gBAAf","sourcesContent":["import { observable, action, runInAction } from 'mobx';\r\nimport { AddItemForm } from '../forms'\r\nimport Axios from 'axios';\r\n\r\nclass AddItemViewStore {\r\n    @observable\r\n    person;\r\n    @observable\r\n    companyId;\r\n    @observable\r\n    categories;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.person = JSON.parse(sessionStorage.getItem('person'));\r\n        this.companyId = this.person.id;\r\n\r\n        this.form = new AddItemForm({\r\n            onSuccess: async (form) => {\r\n                const values = form.values();\r\n                console.log('Success', values);\r\n                try {\r\n                    const createItem = await Axios.post('http://localhost:3001/api/create/item', { name: values.name, companyId: this.companyId, categoryId: values.categoryId });\r\n                    this.form.clear();\r\n                    console.log('Success', createItem);\r\n                    !createItem.data.errno ? this.rootStore.notificationStore.success('Success') : this.rootStore.notificationStore.error('Error');\r\n                } catch (error) {\r\n                    this.form.invalidate(error.message);\r\n                    this.rootStore.notificationStore.success(error.message);\r\n                }\r\n            },\r\n            onError: (form) => {\r\n                const values = form.values();\r\n                console.log('Error', values);\r\n                this.rootStore.notificationStore.error('Error');\r\n            }\r\n        })\r\n    }\r\n\r\n    @action.bound\r\n    getCategories = async () => {\r\n        const companyCategories = await Axios.get('http://localhost:3001/api/get/categories/' + this.companyId);\r\n        console.log('Success', companyCategories);\r\n        runInAction(() => {\r\n            this.categories = companyCategories;\r\n        })\r\n    }\r\n\r\n    navigateDashboard = () => {\r\n        this.rootStore.routerStore.goTo('dashboard');\r\n    }\r\n}\r\n\r\nexport default AddItemViewStore;"]},"metadata":{},"sourceType":"module"}