(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("_"), require("mobx"));
	else if(typeof define === 'function' && define.amd)
		define(["_", "mobx"], factory);
	else if(typeof exports === 'object')
		exports["MobxReactForm"] = factory(require("_"), require("mobx"));
	else
		root["MobxReactForm"] = factory(root["_"], root["mobx"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _mobx = __webpack_require__(1);

var _props = __webpack_require__(9);

var _props2 = _interopRequireDefault(_props);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var getObservableMapValues = function getObservableMapValues(observableMap) {
  return _mobx.values ? (0, _mobx.values)(observableMap) : observableMap.values();
};

var getObservableMapKeys = function getObservableMapKeys(observableMap) {
  return _mobx.values ? (0, _mobx.keys)(observableMap) : observableMap.keys();
};

var checkObserveItem = function checkObserveItem(change) {
  return function (_ref) {
    var key = _ref.key,
        to = _ref.to,
        type = _ref.type,
        exec = _ref.exec;
    return change.type === type && change.name === key && change.newValue === to && exec.apply(change, [change]);
  };
};

var checkObserve = function checkObserve(collection) {
  return function (change) {
    return collection.map(checkObserveItem(change));
  };
};

var checkPropType = function checkPropType(_ref2) {
  var type = _ref2.type,
      data = _ref2.data;

  var $check = void 0;
  switch (type) {
    case 'some':
      $check = function $check($data) {
        return _lodash2.default.some($data, Boolean);
      };break;
    case 'every':
      $check = function $check($data) {
        return _lodash2.default.every($data, Boolean);
      };break;
    default:
      $check = null;
  }
  return $check(data);
};

var hasProps = function hasProps($type, $data) {
  var $props = void 0;
  switch ($type) {
    case 'booleans':
      $props = _props2.default.booleans;
      break;
    case 'field':
      $props = [].concat(_toConsumableArray(_props2.default.field), _toConsumableArray(_props2.default.validation), _toConsumableArray(_props2.default.function), _toConsumableArray(_props2.default.handlers));break;
    case 'all':
      $props = ['id'].concat(_toConsumableArray(_props2.default.booleans), _toConsumableArray(_props2.default.field), _toConsumableArray(_props2.default.validation), _toConsumableArray(_props2.default.function), _toConsumableArray(_props2.default.handlers));break;
    default:
      $props = null;
  }

  return _lodash2.default.intersection($data, $props).length > 0;
};

/**
  Check Allowed Properties
*/
var allowedProps = function allowedProps(type, data) {
  if (hasProps(type, data)) return;
  var $msg = 'The selected property is not allowed';
  throw new Error($msg + ' (' + JSON.stringify(data) + ')');
};

/**
  Throw Error if undefined Fields
*/
var throwError = function throwError(path, fields) {
  var msg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!_lodash2.default.isNil(fields)) return;
  var $msg = _lodash2.default.isNil(msg) ? 'The selected field is not defined' : msg;
  throw new Error($msg + ' (' + path + ')');
};

var pathToStruct = function pathToStruct(path) {
  var struct = void 0;
  struct = _lodash2.default.replace(path, new RegExp('[.]\\d+($|.)', 'g'), '[].');
  struct = _lodash2.default.replace(struct, '..', '.');
  struct = _lodash2.default.trim(struct, '.');
  return struct;
};

var hasSome = function hasSome(obj, keys) {
  return _lodash2.default.some(keys, _lodash2.default.partial(_lodash2.default.has, obj));
};

var isPromise = function isPromise(obj) {
  return !!obj && typeof obj.then === 'function' && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function');
};

var isStruct = function isStruct(struct) {
  return _lodash2.default.isArray(struct) && _lodash2.default.every(struct, _lodash2.default.isString);
};

var isEmptyArray = function isEmptyArray(field) {
  return _lodash2.default.isEmpty(field) && _lodash2.default.isArray(field);
};

var isArrayOfObjects = function isArrayOfObjects(fields) {
  return _lodash2.default.isArray(fields) && _lodash2.default.every(fields, _lodash2.default.isPlainObject);
};

var $getKeys = function $getKeys(fields) {
  return _lodash2.default.union(_lodash2.default.map(_lodash2.default.values(fields), function (values) {
    return _lodash2.default.keys(values);
  })[0]);
};

var hasUnifiedProps = function hasUnifiedProps(_ref3) {
  var fields = _ref3.fields;
  return !isStruct({ fields: fields }) && hasProps('field', $getKeys(fields));
};

var hasSeparatedProps = function hasSeparatedProps(initial) {
  return hasSome(initial, _props2.default.separated) || hasSome(initial, _props2.default.validation);
};

var allowNested = function allowNested(field, strictProps) {
  return _lodash2.default.isObject(field) && !_lodash2.default.isDate(field) && !_lodash2.default.has(field, 'fields') && (!hasSome(field, [].concat(_toConsumableArray(_props2.default.field), _toConsumableArray(_props2.default.validation), _toConsumableArray(_props2.default.function), _toConsumableArray(_props2.default.handlers))) || strictProps);
};

var parseIntKeys = function parseIntKeys(fields) {
  return _lodash2.default.map(getObservableMapKeys(fields), _lodash2.default.ary(_lodash2.default.toNumber, 1));
};

var hasIntKeys = function hasIntKeys(fields) {
  return _lodash2.default.every(parseIntKeys(fields), _lodash2.default.isInteger);
};

var maxKey = function maxKey(fields) {
  var max = _lodash2.default.max(parseIntKeys(fields));
  return _lodash2.default.isUndefined(max) ? 0 : max + 1;
};

var uniqueId = function uniqueId(field) {
  return _lodash2.default.uniqueId([_lodash2.default.replace(field.path, new RegExp('\\.', 'g'), '-'), '--'].join(''));
};

var $isEvent = function $isEvent(obj) {
  if (_lodash2.default.isNil(obj) || typeof Event === 'undefined') return false;
  return obj instanceof Event || !_lodash2.default.isNil(obj.target); // eslint-disable-line
};

var $hasFiles = function $hasFiles($) {
  return $.target.files && $.target.files.length !== 0;
};

var $isBool = function $isBool($, val) {
  return _lodash2.default.isBoolean(val) && _lodash2.default.isBoolean($.target.checked);
};

var $try = function $try() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var found = null;

  args.map(function (val) {
    return (// eslint-disable-line
      found === null && !_lodash2.default.isNil(val) && (found = val)
    );
  });

  return found;
};

exports.default = {
  props: _props2.default,
  checkObserve: checkObserve,
  checkPropType: checkPropType,
  hasProps: hasProps,
  allowedProps: allowedProps,
  throwError: throwError,
  isPromise: isPromise,
  isStruct: isStruct,
  isEmptyArray: isEmptyArray,
  isArrayOfObjects: isArrayOfObjects,
  pathToStruct: pathToStruct,
  hasUnifiedProps: hasUnifiedProps,
  hasSeparatedProps: hasSeparatedProps,
  allowNested: allowNested,
  parseIntKeys: parseIntKeys,
  hasIntKeys: hasIntKeys,
  maxKey: maxKey,
  uniqueId: uniqueId,
  $isEvent: $isEvent,
  $hasFiles: $hasFiles,
  $isBool: $isBool,
  $try: $try,
  getObservableMapKeys: getObservableMapKeys,
  getObservableMapValues: getObservableMapValues
};
module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultClearValue = function defaultClearValue(_ref) {
  var value = _ref.value;

  if (_lodash2.default.isArray(value)) return [];
  if (_lodash2.default.isDate(value)) return null;
  if (_lodash2.default.isBoolean(value)) return false;
  if (_lodash2.default.isNumber(value)) return 0;
  if (_lodash2.default.isString(value)) return '';
  return undefined;
};

var defaultValue = function defaultValue(_ref2) {
  var type = _ref2.type,
      _ref2$nullable = _ref2.nullable,
      nullable = _ref2$nullable === undefined ? false : _ref2$nullable,
      _ref2$isEmptyArray = _ref2.isEmptyArray,
      isEmptyArray = _ref2$isEmptyArray === undefined ? false : _ref2$isEmptyArray;

  if (type === 'date') return null;
  if (type === 'datetime-local') return null;
  if (type === 'checkbox') return false;
  if (type === 'number') return 0;
  if (nullable) return null;
  if (isEmptyArray) return [];
  return '';
};

var parsePath = function parsePath(path) {
  var $path = path;
  $path = _lodash2.default.replace($path, new RegExp('\\[', 'g'), '.');
  $path = _lodash2.default.replace($path, new RegExp('\\]', 'g'), '');
  return $path;
};

var parseInput = function parseInput(input, _ref3) {
  var type = _ref3.type,
      isEmptyArray = _ref3.isEmptyArray,
      nullable = _ref3.nullable,
      separated = _ref3.separated,
      unified = _ref3.unified,
      fallback = _ref3.fallback;
  return input(_utils2.default.$try(separated, unified, fallback, defaultValue({
    type: type, isEmptyArray: isEmptyArray, nullable: nullable
  })));
};

var parseArrayProp = function parseArrayProp($val, $prop) {
  var $values = _lodash2.default.values($val);
  if ($prop === 'value' || $prop === 'initial' || $prop === 'default') {
    return _lodash2.default.without($values, null, undefined, '');
  }
  return $values;
};

var parseCheckArray = function parseCheckArray(field, value, prop) {
  return field.hasIncrementalKeys ? parseArrayProp(value, prop) : value;
};

var parseCheckOutput = function parseCheckOutput($field, $prop) {
  return $prop === 'value' && $field.$output ? $field.$output($field[$prop]) : $field[$prop];
};

var defineFieldsFromStruct = function defineFieldsFromStruct(struct) {
  var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _lodash2.default.reduceRight(struct, function ($, name) {
    var obj = {};
    if (_lodash2.default.endsWith(name, '[]')) {
      var val = add ? [$] : [];
      obj[_lodash2.default.trimEnd(name, '[]')] = val;
      return obj;
    }
    // no brakets
    var prev = struct[struct.indexOf(name) - 1];
    var stop = _lodash2.default.endsWith(prev, '[]') && _lodash2.default.last(struct) === name;
    if (!add && stop) return obj;
    obj[name] = $;
    return obj;
  }, {});
};

var handleFieldsArrayOfStrings = function handleFieldsArrayOfStrings($fields) {
  var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var fields = $fields;
  // handle array with field struct (strings)
  if (_utils2.default.isStruct(fields)) {
    fields = _lodash2.default.transform(fields, function ($obj, $) {
      var pathStruct = _lodash2.default.split($, '.');
      // as array of strings (with empty values)
      if (!pathStruct.length) return Object.assign($obj, _defineProperty({}, $, ''));
      // define flat or nested fields from pathStruct
      return _lodash2.default.merge($obj, defineFieldsFromStruct(pathStruct, add));
    }, {});
  }
  return fields;
};

var handleFieldsArrayOfObjects = function handleFieldsArrayOfObjects($fields) {
  var fields = $fields;
  // handle array of objects (with unified props)
  if (_utils2.default.isArrayOfObjects(fields)) {
    fields = _lodash2.default.transform(fields, function ($obj, field) {
      if (_utils2.default.hasUnifiedProps({ fields: { field: field } }) && !_lodash2.default.has(field, 'name')) return undefined;
      return Object.assign($obj, _defineProperty({}, field.name, field));
    }, {});
  }
  return fields;
};

var handleFieldsNested = function handleFieldsNested(fields) {
  var strictProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return _lodash2.default.transform(fields, function (obj, field, key) {
    if (_utils2.default.allowNested(field, strictProps)) {
      // define nested field
      return Object.assign(obj, _defineProperty({}, key, { fields: _utils2.default.isEmptyArray(field) ? [] : handleFieldsNested(field) }));
    }
    return Object.assign(obj, _defineProperty({}, key, field));
  }, {});
};

/* mapNestedValuesToUnifiedValues

FROM:

{
  street: '123 Fake St.',
  zip: '12345',
}

TO:

[{
  name: 'street'
  value: '123 Fake St.',
}, {
  name: 'zip'
  value: '12345',
}]

*/
var mapNestedValuesToUnifiedValues = function mapNestedValuesToUnifiedValues(data) {
  return _lodash2.default.isPlainObject(data) ? _lodash2.default.map(data, function (value, name) {
    return { value: value, name: name };
  }) : undefined;
};

/* reduceValuesToUnifiedFields

FROM:

{
  name: 'fatty',
  address: {
    street: '123 Fake St.',
    zip: '12345',
  },
};

TO:

{
  name: {
    value: 'fatty',
    fields: undefined
  },
  address: {
    value: {
      street: '123 Fake St.',
      zip: '12345'
    },
    fields: [ ... ]
  },
};

*/
var reduceValuesToUnifiedFields = function reduceValuesToUnifiedFields(values) {
  return _lodash2.default.transform(values, function (obj, value, key) {
    return Object.assign(obj, _defineProperty({}, key, {
      value: value,
      fields: mapNestedValuesToUnifiedValues(value)
    }));
  }, {});
};

/*
  Fallback Unified Props to Sepated Mode
*/
var handleFieldsPropsFallback = function handleFieldsPropsFallback(fields, initial, fallback) {
  if (!_lodash2.default.has(initial, 'values')) return fields;
  // if the 'values' object is passed in constructor
  // then update the fields definitions
  var values = initial.values;

  if (_utils2.default.hasUnifiedProps({ fields: fields })) {
    values = reduceValuesToUnifiedFields(values);
  }
  return _lodash2.default.merge(fields, _lodash2.default.transform(values, function (result, v, k) {
    if (_lodash2.default.isArray(fields[k])) result[k] = v;
    if (!(k in fields) && (!isNaN(Number(k)) || fallback)) result[k] = v;
  }, {}));
};

var mergeSchemaDefaults = function mergeSchemaDefaults(fields, validator) {
  if (validator) {
    var schema = _lodash2.default.get(validator.plugins, 'svk.config.schema');
    if (_lodash2.default.isEmpty(fields) && schema && !!schema.properties) {
      _lodash2.default.each(schema.properties, function (prop, key) {
        _lodash2.default.set(fields, key, {
          value: prop.default,
          label: prop.title
        });
      });
    }
  }
  return fields;
};

var prepareFieldsData = function prepareFieldsData(initial) {
  var strictProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var fields = _lodash2.default.merge(handleFieldsArrayOfStrings(initial.fields, false), handleFieldsArrayOfStrings(initial.struct, false));

  fields = handleFieldsArrayOfObjects(fields);
  fields = handleFieldsPropsFallback(fields, initial, fallback);
  fields = handleFieldsNested(fields, strictProps);

  return fields;
};

var pathToFieldsTree = function pathToFieldsTree(struct, path) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var add = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var structPath = _utils2.default.pathToStruct(path);
  var structArray = _lodash2.default.filter(struct, function (item) {
    return _lodash2.default.startsWith(item, structPath);
  });
  var $tree = handleFieldsArrayOfStrings(structArray, add);
  var $struct = _lodash2.default.replace(structPath, new RegExp('\\[]', 'g'), '[' + n + ']');
  return handleFieldsNested(_lodash2.default.get($tree, $struct));
};

exports.default = {
  defaultValue: defaultValue,
  defaultClearValue: defaultClearValue,
  parseInput: parseInput,
  parsePath: parsePath,
  parseArrayProp: parseArrayProp,
  parseCheckArray: parseCheckArray,
  parseCheckOutput: parseCheckOutput,
  mergeSchemaDefaults: mergeSchemaDefaults,
  handleFieldsNested: handleFieldsNested,
  handleFieldsArrayOfStrings: handleFieldsArrayOfStrings,
  prepareFieldsData: prepareFieldsData,
  pathToFieldsTree: pathToFieldsTree
};
module.exports = exports['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var Base = (_class = function () {
  function Base() {
    var _this = this;

    _classCallCheck(this, Base);

    this.noop = function () {};

    _initDefineProp(this, '$submitted', _descriptor, this);

    _initDefineProp(this, '$submitting', _descriptor2, this);

    _initDefineProp(this, '$validated', _descriptor3, this);

    _initDefineProp(this, '$validating', _descriptor4, this);

    this.execHook = function (name) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return (0, _utils.$try)(fallback[name], _this.$hooks[name], _this.hooks && _this.hooks.apply(_this, [_this])[name], _this.noop).apply(_this, [_this]);
    };

    this.execHandler = function (name, args) {
      var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return [(0, _utils.$try)(_this.$handlers[name] && _this.$handlers[name].apply(_this, [_this]), _this.handlers && _this.handlers.apply(_this, [_this])[name] && _this.handlers.apply(_this, [_this])[name].apply(_this, [_this]), fallback, _this.noop).apply(_this, [].concat(_toConsumableArray(args))), _this.execHook(name)];
    };

    this.intercept = function (opt) {
      return _this.MOBXEvent(_lodash2.default.isFunction(opt) ? { type: 'interceptor', call: opt } : _extends({ type: 'interceptor' }, opt));
    };

    this.observe = function (opt) {
      return _this.MOBXEvent(_lodash2.default.isFunction(opt) ? { type: 'observer', call: opt } : _extends({ type: 'observer' }, opt));
    };

    this.onClear = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _this.execHandler('onClear', args, function (e) {
        e.preventDefault();
        _this.clear(true);
      });
    };

    this.onReset = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.execHandler('onReset', args, function (e) {
        e.preventDefault();
        _this.reset(true);
      });
    };

    this.onSubmit = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.execHandler('onSubmit', args, function (e) {
        var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        e.preventDefault();
        _this.submit(o);
      });
    };

    this.onAdd = function () {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.execHandler('onAdd', args, function (e, val) {
        e.preventDefault();
        _this.add((0, _utils.$isEvent)(val) ? null : val);
      });
    };

    this.onDel = function () {
      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.execHandler('onDel', args, function (e, path) {
        e.preventDefault();
        _this.del((0, _utils.$isEvent)(path) ? _this.path : path);
      });
    };
  }

  _createClass(Base, [{
    key: 'submitted',
    get: function get() {
      return (0, _mobx.toJS)(this.$submitted);
    }
  }, {
    key: 'submitting',
    get: function get() {
      return (0, _mobx.toJS)(this.$submitting);
    }
  }, {
    key: 'validated',
    get: function get() {
      return (0, _mobx.toJS)(this.$validated);
    }
  }, {
    key: 'validating',
    get: function get() {
      return (0, _mobx.toJS)(this.$validating);
    }
  }, {
    key: 'hasIncrementalKeys',
    get: function get() {
      return this.fields.size && (0, _utils.hasIntKeys)(this.fields);
    }
  }, {
    key: 'hasNestedFields',
    get: function get() {
      return this.fields.size !== 0;
    }
  }, {
    key: 'size',
    get: function get() {
      return this.fields.size;
    }

    /**
     Interceptor
     */


    /**
     Observer
     */


    /**
      Event Handler: On Clear
    */


    /**
      Event Handler: On Reset
    */


    /**
      Event Handler: On Submit
     */


    /**
      Event Handler: On Add
    */


    /**
      Event Handler: On Del
    */

  }]);

  return Base;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$submitted', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, '$submitting', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, '$validated', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, '$validating', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _applyDecoratedDescriptor(_class.prototype, 'submitted', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'submitted'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'submitting', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'submitting'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validated', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validated'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validating', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validating'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasIncrementalKeys', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'hasIncrementalKeys'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasNestedFields', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'hasNestedFields'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'size', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'size'), _class.prototype)), _class);
exports.default = Base;
module.exports = exports['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prototypes = exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _desc2, _value2, _obj;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _Base2 = __webpack_require__(4);

var _Base3 = _interopRequireDefault(_Base2);

var _utils = __webpack_require__(2);

var _parser = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var setupFieldProps = function setupFieldProps(instance, props, data) {
  return Object.assign(instance, {
    $label: props.$label || data && data.label || '',
    $placeholder: props.$placeholder || data && data.placeholder || '',
    $disabled: props.$disabled || data && data.disabled || false,
    $bindings: props.$bindings || data && data.bindings || 'default',
    $related: props.$related || data && data.related || [],
    $validators: (0, _mobx.toJS)(props.$validators || data && data.validators || null),
    $validatedWith: props.$validatedWith || data && data.validatedWith || 'value',
    $rules: props.$rules || data && data.rules || null,
    $observers: props.$observers || data && data.observers || null,
    $interceptors: props.$interceptors || data && data.interceptors || null,
    $extra: props.$extra || data && data.extra || null,
    $options: props.$options || data && data.options || {},
    $hooks: props.$hooks || data && data.hooks || {},
    $handlers: props.$handlers || data && data.handlers || {}
  });
};

var setupDefaultProp = function setupDefaultProp(instance, data, props, update, _ref) {
  var isEmptyArray = _ref.isEmptyArray;
  return (0, _parser.parseInput)(instance.$input, {
    nullable: true,
    isEmptyArray: isEmptyArray,
    type: instance.type,
    unified: update ? (0, _parser.defaultValue)({ type: instance.type }) : data && data.default,
    separated: props.$default,
    fallback: instance.$initial
  });
};

var Field = (_class = function (_Base) {
  _inherits(Field, _Base);

  function Field(_ref2) {
    var key = _ref2.key,
        path = _ref2.path,
        _ref2$data = _ref2.data,
        data = _ref2$data === undefined ? {} : _ref2$data,
        _ref2$props = _ref2.props,
        props = _ref2$props === undefined ? {} : _ref2$props,
        _ref2$update = _ref2.update,
        update = _ref2$update === undefined ? false : _ref2$update,
        state = _ref2.state;

    _classCallCheck(this, Field);

    var _this = _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).call(this));

    _this.fields = _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({});
    _this.hasInitialNestedFields = false;
    _this.incremental = false;
    _this.$hooks = {};
    _this.$handlers = {};

    _this.$input = function ($) {
      return $;
    };

    _this.$output = function ($) {
      return $;
    };

    _initDefineProp(_this, '$options', _descriptor, _this);

    _initDefineProp(_this, '$value', _descriptor2, _this);

    _initDefineProp(_this, '$type', _descriptor3, _this);

    _initDefineProp(_this, '$label', _descriptor4, _this);

    _initDefineProp(_this, '$placeholder', _descriptor5, _this);

    _initDefineProp(_this, '$default', _descriptor6, _this);

    _initDefineProp(_this, '$initial', _descriptor7, _this);

    _initDefineProp(_this, '$bindings', _descriptor8, _this);

    _initDefineProp(_this, '$extra', _descriptor9, _this);

    _initDefineProp(_this, '$related', _descriptor10, _this);

    _initDefineProp(_this, '$validatedWith', _descriptor11, _this);

    _initDefineProp(_this, '$validators', _descriptor12, _this);

    _initDefineProp(_this, '$rules', _descriptor13, _this);

    _initDefineProp(_this, '$disabled', _descriptor14, _this);

    _initDefineProp(_this, '$focused', _descriptor15, _this);

    _initDefineProp(_this, '$touched', _descriptor16, _this);

    _initDefineProp(_this, '$changed', _descriptor17, _this);

    _initDefineProp(_this, '$blurred', _descriptor18, _this);

    _initDefineProp(_this, '$deleted', _descriptor19, _this);

    _initDefineProp(_this, '$clearing', _descriptor20, _this);

    _initDefineProp(_this, '$resetting', _descriptor21, _this);

    _initDefineProp(_this, 'autoFocus', _descriptor22, _this);

    _initDefineProp(_this, 'showError', _descriptor23, _this);

    _initDefineProp(_this, 'errorSync', _descriptor24, _this);

    _initDefineProp(_this, 'errorAsync', _descriptor25, _this);

    _initDefineProp(_this, 'validationErrorStack', _descriptor26, _this);

    _initDefineProp(_this, 'validationFunctionsData', _descriptor27, _this);

    _initDefineProp(_this, 'validationAsyncData', _descriptor28, _this);

    _initDefineProp(_this, 'files', _descriptor29, _this);

    _this.sync = (0, _mobx.action)(function (e) {
      var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _this.$changed = true;

      var $get = function $get($) {
        return (0, _utils.$isBool)($, _this.value) ? $.target.checked : $.target.value;
      };

      // assume "v" or "e" are the values
      if (_lodash2.default.isNil(e) || _lodash2.default.isNil(e.target)) {
        if (!_lodash2.default.isNil(v) && !_lodash2.default.isNil(v.target)) {
          v = $get(v); // eslint-disable-line
        }

        _this.value = (0, _utils.$try)(e, v);
        return;
      }

      if (!_lodash2.default.isNil(e.target)) {
        _this.value = $get(e);
        return;
      }

      _this.value = e;
    });

    _this.onChange = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _this.type === 'file' ? _this.onDrop.apply(_this, args) : _this.execHandler('onChange', args, _this.sync);
    };

    _this.onToggle = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.execHandler('onToggle', args, _this.sync);
    };

    _this.onBlur = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.execHandler('onBlur', args, (0, _mobx.action)(function () {
        if (!_this.$blurred) {
          _this.$blurred = true;
        }

        _this.$focused = false;
      }));
    };

    _this.onFocus = function () {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.execHandler('onFocus', args, (0, _mobx.action)(function () {
        _this.$focused = true;
        _this.$touched = true;
      }));
    };

    _this.onDrop = function () {
      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.execHandler('onDrop', args, (0, _mobx.action)(function () {
        var e = args[0];
        var files = null;

        if ((0, _utils.$isEvent)(e) && (0, _utils.$hasFiles)(e)) {
          files = _lodash2.default.map(e.target.files);
        }

        _this.files = files || args;
      }));
    };

    _this.state = state;

    _this.setupField(key, path, data, props, update);
    _this.checkValidationPlugins();
    _this.initNestedFields(data, update);

    _this.incremental = _this.hasIncrementalKeys !== 0;

    _this.debouncedValidation = _lodash2.default.debounce(_this.validate, _this.state.options.get('validationDebounceWait', _this), _this.state.options.get('validationDebounceOptions', _this));

    _this.observeValidationOnBlur();
    _this.observeValidationOnChange();

    _this.initMOBXEvent('observers');
    _this.initMOBXEvent('interceptors');

    _this.execHook('onInit');
    return _this;
  }

  /* ------------------------------------------------------------------ */
  /* COMPUTED */

  _createClass(Field, [{
    key: 'checkValidationErrors',
    get: function get() {
      return this.validationAsyncData.valid === false && !_lodash2.default.isEmpty(this.validationAsyncData) || !_lodash2.default.isEmpty(this.validationErrorStack) || _lodash2.default.isString(this.errorAsync) || _lodash2.default.isString(this.errorSync);
    }
  }, {
    key: 'checked',
    get: function get() {
      return this.type === 'checkbox' ? this.value : undefined;
    }
  }, {
    key: 'value',
    get: function get() {
      return this.getComputedProp('value');
    },
    set: function set(newVal) {
      if (this.$value === newVal) return;
      // handle numbers
      if (this.state.options.get('autoParseNumbers', this) === true) {
        if (_lodash2.default.isNumber(this.$initial)) {
          if (new RegExp('^-?\\d+(,\\d+)*(\\.\\d+([eE]\\d+)?)?$', 'g').exec(newVal)) {
            this.$value = _lodash2.default.toNumber(newVal);
            return;
          }
        }
      }
      // handle parse value
      this.$value = newVal;
    }
  }, {
    key: 'initial',
    get: function get() {
      return this.$initial ? (0, _mobx.toJS)(this.$initial) : this.getComputedProp('initial');
    },
    set: function set(val) {
      this.$initial = (0, _parser.parseInput)(this.$input, { separated: val });
    }
  }, {
    key: 'default',
    get: function get() {
      return this.$default ? (0, _mobx.toJS)(this.$default) : this.getComputedProp('default');
    },
    set: function set(val) {
      this.$default = (0, _parser.parseInput)(this.$input, { separated: val });
    }
  }, {
    key: 'actionRunning',
    get: function get() {
      return this.submitting || this.clearing || this.resetting;
    }
  }, {
    key: 'type',
    get: function get() {
      return (0, _mobx.toJS)(this.$type);
    }
  }, {
    key: 'label',
    get: function get() {
      return (0, _mobx.toJS)(this.$label);
    }
  }, {
    key: 'placeholder',
    get: function get() {
      return (0, _mobx.toJS)(this.$placeholder);
    }
  }, {
    key: 'extra',
    get: function get() {
      return (0, _mobx.toJS)(this.$extra);
    }
  }, {
    key: 'options',
    get: function get() {
      return (0, _mobx.toJS)(this.$options);
    }
  }, {
    key: 'bindings',
    get: function get() {
      return (0, _mobx.toJS)(this.$bindings);
    }
  }, {
    key: 'related',
    get: function get() {
      return (0, _mobx.toJS)(this.$related);
    }
  }, {
    key: 'disabled',
    get: function get() {
      return (0, _mobx.toJS)(this.$disabled);
    }
  }, {
    key: 'rules',
    get: function get() {
      return (0, _mobx.toJS)(this.$rules);
    }
  }, {
    key: 'validators',
    get: function get() {
      return (0, _mobx.toJS)(this.$validators);
    }
  }, {
    key: 'validatedValue',
    get: function get() {
      return (0, _parser.parseCheckOutput)(this, this.$validatedWith);
    }
  }, {
    key: 'error',
    get: function get() {
      if (this.showError === false) return null;
      return this.errorAsync || this.errorSync || null;
    }
  }, {
    key: 'hasError',
    get: function get() {
      return this.checkValidationErrors || this.check('hasError', true);
    }
  }, {
    key: 'isValid',
    get: function get() {
      return !this.checkValidationErrors && this.check('isValid', true);
    }
  }, {
    key: 'isDefault',
    get: function get() {
      return !_lodash2.default.isNil(this.default) && _lodash2.default.isEqual(this.default, this.value);
    }
  }, {
    key: 'isDirty',
    get: function get() {
      return !_lodash2.default.isUndefined(this.initial) && !_lodash2.default.isEqual(this.initial, this.value);
    }
  }, {
    key: 'isPristine',
    get: function get() {
      return !_lodash2.default.isNil(this.initial) && _lodash2.default.isEqual(this.initial, this.value);
    }
  }, {
    key: 'isEmpty',
    get: function get() {
      if (this.hasNestedFields) return this.check('isEmpty', true);
      if (_lodash2.default.isBoolean(this.value)) return !!this.$value;
      if (_lodash2.default.isNumber(this.value)) return false;
      if (_lodash2.default.isDate(this.value)) return false;
      return _lodash2.default.isEmpty(this.value);
    }
  }, {
    key: 'resetting',
    get: function get() {
      return this.hasNestedFields ? this.check('resetting', true) : this.$resetting;
    }
  }, {
    key: 'clearing',
    get: function get() {
      return this.hasNestedFields ? this.check('clearing', true) : this.$clearing;
    }
  }, {
    key: 'focused',
    get: function get() {
      return this.hasNestedFields ? this.check('focused', true) : this.$focused;
    }
  }, {
    key: 'blurred',
    get: function get() {
      return this.hasNestedFields ? this.check('blurred', true) : this.$blurred;
    }
  }, {
    key: 'touched',
    get: function get() {
      return this.hasNestedFields ? this.check('touched', true) : this.$touched;
    }
  }, {
    key: 'changed',
    get: function get() {
      return this.hasNestedFields ? this.check('changed', true) : this.$changed;
    }
  }, {
    key: 'deleted',
    get: function get() {
      return this.hasNestedFields ? this.check('deleted', true) : this.$deleted;
    }

    /* ------------------------------------------------------------------ */
    /* EVENTS HANDLERS */

  }]);

  return Field;
}(_Base3.default), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$options', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, '$value', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, '$type', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, '$label', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, '$placeholder', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, '$default', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, '$initial', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, '$bindings', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, '$extra', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, '$related', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, '$validatedWith', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, '$validators', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, '$rules', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, '$disabled', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, '$focused', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, '$touched', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, '$changed', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, '$blurred', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, '$deleted', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, '$clearing', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, '$resetting', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, 'autoFocus', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, 'showError', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, 'errorSync', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, 'errorAsync', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, 'validationErrorStack', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, 'validationFunctionsData', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, 'validationAsyncData', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, 'files', [_mobx.observable], {
  enumerable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class.prototype, 'checkValidationErrors', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'checkValidationErrors'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checked', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'checked'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'value', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'value'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'initial', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'initial'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'default', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'default'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'actionRunning', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'actionRunning'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'type', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'type'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'label', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'label'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'placeholder', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'placeholder'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'extra', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'extra'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'options', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'options'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'bindings', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'bindings'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'related', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'related'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'disabled', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'disabled'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'rules', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'rules'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validators', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validators'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validatedValue', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validatedValue'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'error', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'error'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasError', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'hasError'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDefault', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDefault'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isPristine', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isPristine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isEmpty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isEmpty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resetting', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'resetting'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clearing', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'clearing'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'focused', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'focused'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'blurred', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'blurred'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'touched', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'touched'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'changed', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'changed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'deleted', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'deleted'), _class.prototype)), _class);

/**
  Prototypes
*/

exports.default = Field;
var prototypes = exports.prototypes = (_obj = {
  setupField: function setupField($key, $path, $data, $props, update) {
    this.key = $key;
    this.path = $path;
    this.id = this.state.options.get('uniqueId').apply(this, [this]);
    var struct = this.state.struct();
    var structPath = (0, _utils.pathToStruct)(this.path);
    var isEmptyArray = Array.isArray(struct) ? struct.filter(function (s) {
      return s.startsWith(structPath);
    }).find(function (s) {
      return s.substr(structPath.length, 2) === '[]';
    }) : Array.isArray(_lodash2.default.get(struct, this.path));

    var $type = $props.$type,
        $input = $props.$input,
        $output = $props.$output;

    // eslint-disable-next-line
    // if (_.isNil($data)) $data = '';

    if (_lodash2.default.isPlainObject($data)) {
      var type = $data.type,
          input = $data.input,
          output = $data.output;


      this.name = _lodash2.default.toString($data.name || $key);
      this.$type = $type || type || 'text';
      this.$input = (0, _utils.$try)($input, input, this.$input);
      this.$output = (0, _utils.$try)($output, output, this.$output);

      this.$value = (0, _parser.parseInput)(this.$input, {
        isEmptyArray: isEmptyArray,
        type: this.type,
        unified: $data.value,
        separated: $props.$value,
        fallback: $props.$initial
      });

      this.$initial = (0, _parser.parseInput)(this.$input, {
        nullable: true,
        isEmptyArray: isEmptyArray,
        type: this.type,
        unified: $data.initial,
        separated: $props.$initial,
        fallback: this.$value
      });

      this.$default = setupDefaultProp(this, $data, $props, update, {
        isEmptyArray: isEmptyArray
      });

      setupFieldProps(this, $props, $data);
      return;
    }

    /* The field IS the value here */
    this.name = _lodash2.default.toString($key);
    this.$type = $type || 'text';
    this.$input = (0, _utils.$try)($input, this.$input);
    this.$output = (0, _utils.$try)($output, this.$output);

    this.$value = (0, _parser.parseInput)(this.$input, {
      isEmptyArray: isEmptyArray,
      type: this.type,
      unified: $data,
      separated: $props.$value
    });

    this.$initial = (0, _parser.parseInput)(this.$input, {
      nullable: true,
      isEmptyArray: isEmptyArray,
      type: this.type,
      unified: $data,
      separated: $props.$initial,
      fallback: this.$value
    });

    this.$default = setupDefaultProp(this, $data, $props, update, {
      isEmptyArray: isEmptyArray
    });

    setupFieldProps(this, $props, $data);
  },
  getComputedProp: function getComputedProp(key) {
    var _this2 = this;

    if (this.incremental || this.hasNestedFields) {
      var $val = key === 'value' ? this.get(key, false) : (0, _mobx.untracked)(function () {
        return _this2.get(key, false);
      });

      return !_lodash2.default.isEmpty($val) ? $val : [];
    }

    var val = this['$' + key];

    if (_lodash2.default.isArray(val) || (0, _mobx.isObservableArray)(val)) {
      return [].slice.call(val);
    }

    return (0, _mobx.toJS)(val);
  },
  checkValidationPlugins: function checkValidationPlugins() {
    var drivers = this.state.form.validator.drivers;

    var form = this.state.form.name ? this.state.form.name + '/' : '';

    if (_lodash2.default.isNil(drivers.dvr) && !_lodash2.default.isNil(this.rules)) {
      throw new Error('The DVR validation rules are defined but no DVR plugin provided. Field: "' + (form + this.path) + '".');
    }

    if (_lodash2.default.isNil(drivers.vjf) && !_lodash2.default.isNil(this.validators)) {
      throw new Error('The VJF validators functions are defined but no VJF plugin provided. Field: "' + (form + this.path) + '".');
    }
  },
  initNestedFields: function initNestedFields(field, update) {
    var fields = _lodash2.default.isNil(field) ? null : field.fields;

    if (_lodash2.default.isArray(fields) && !_lodash2.default.isEmpty(fields)) {
      this.hasInitialNestedFields = true;
    }

    this.initFields({ fields: fields }, update);

    if (!update && _lodash2.default.isArray(fields) && _lodash2.default.isEmpty(fields)) {
      if (_lodash2.default.isArray(this.value) && !_lodash2.default.isEmpty(this.value)) {
        this.hasInitialNestedFields = true;
        this.initFields({ fields: fields, values: this.value }, update);
      }
    }
  },
  invalidate: function invalidate(message) {
    var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (async === true) {
      this.errorAsync = message;
      return;
    }

    if (_lodash2.default.isArray(message)) {
      this.validationErrorStack = message;
      this.showErrors(true);
      return;
    }

    this.validationErrorStack.unshift(message);
    this.showErrors(true);
  },
  setValidationAsyncData: function setValidationAsyncData() {
    var valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    this.validationAsyncData = { valid: valid, message: message };
  },
  resetValidation: function resetValidation() {
    var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.showError = true;
    this.errorSync = null;
    this.errorAsync = null;
    this.validationAsyncData = {};
    this.validationFunctionsData = [];
    this.validationErrorStack = [];
    if (deep) this.each(function (field) {
      return field.resetValidation();
    });
  },
  clear: function clear() {
    var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.$clearing = true;
    this.$touched = false;
    this.$changed = false;
    this.$blurred = false;

    this.$value = (0, _parser.defaultClearValue)({ value: this.$value });
    this.files = undefined;

    if (deep) this.each(function (field) {
      return field.clear(true);
    });

    this.validate({
      showErrors: this.state.options.get('showErrorsOnClear', this)
    });
  },
  reset: function reset() {
    var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.$resetting = true;
    this.$touched = false;
    this.$changed = false;
    this.$blurred = false;

    var useDefaultValue = this.$default !== this.$initial;
    if (useDefaultValue) this.value = this.$default;
    if (!useDefaultValue) this.value = this.$initial;
    this.files = undefined;

    if (deep) this.each(function (field) {
      return field.reset(true);
    });

    this.validate({
      showErrors: this.state.options.get('showErrorsOnReset', this)
    });
  },
  focus: function focus() {
    // eslint-disable-next-line
    this.state.form.each(function (field) {
      return field.autoFocus = false;
    });
    this.autoFocus = true;
  },
  showErrors: function showErrors() {
    var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.showError = show;
    this.errorSync = _lodash2.default.head(this.validationErrorStack);
    this.each(function (field) {
      return field.showErrors(show);
    });
  },
  showAsyncErrors: function showAsyncErrors() {
    if (this.validationAsyncData.valid === false) {
      this.errorAsync = this.validationAsyncData.message;
      return;
    }
    this.errorAsync = null;
  },
  observeValidationOnBlur: function observeValidationOnBlur() {
    var _this3 = this;

    var opt = this.state.options;
    if (opt.get('validateOnBlur', this)) {
      this.disposeValidationOnBlur = (0, _mobx.observe)(this, '$focused', function (change) {
        return change.newValue === false && _this3.debouncedValidation({
          showErrors: opt.get('showErrorsOnBlur', _this3)
        });
      });
    }
  },
  observeValidationOnChange: function observeValidationOnChange() {
    var _this4 = this;

    var opt = this.state.options;
    if (opt.get('validateOnChange', this)) {
      this.disposeValidationOnChange = (0, _mobx.observe)(this, '$value', function () {
        return !_this4.actionRunning && _this4.debouncedValidation({
          showErrors: opt.get('showErrorsOnChange', _this4)
        });
      });
    } else if (opt.get('validateOnChangeAfterInitialBlur', this) || opt.get('validateOnChangeAfterSubmit', this)) {
      this.disposeValidationOnChange = (0, _mobx.observe)(this, '$value', function () {
        return !_this4.actionRunning && (opt.get('validateOnChangeAfterInitialBlur', _this4) && _this4.blurred || opt.get('validateOnChangeAfterSubmit', _this4) && _this4.state.form.submitted) && _this4.debouncedValidation({
          showErrors: opt.get('showErrorsOnChange', _this4)
        });
      });
    }
  },
  initMOBXEvent: function initMOBXEvent(type) {
    if (!_lodash2.default.isArray(this['$' + type])) return;

    var fn = void 0;
    if (type === 'observers') fn = this.observe;
    if (type === 'interceptors') fn = this.intercept;
    this['$' + type].map(function (obj) {
      return fn(_lodash2.default.omit(obj, 'path'));
    });
  },
  bind: function bind() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return this.state.bindings.load(this, this.bindings, props);
  }
}, (_applyDecoratedDescriptor(_obj, 'setupField', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'setupField'), _obj), _applyDecoratedDescriptor(_obj, 'initNestedFields', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'initNestedFields'), _obj), _applyDecoratedDescriptor(_obj, 'invalidate', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'invalidate'), _obj), _applyDecoratedDescriptor(_obj, 'setValidationAsyncData', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'setValidationAsyncData'), _obj), _applyDecoratedDescriptor(_obj, 'resetValidation', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'resetValidation'), _obj), _applyDecoratedDescriptor(_obj, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'clear'), _obj), _applyDecoratedDescriptor(_obj, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'reset'), _obj), _applyDecoratedDescriptor(_obj, 'focus', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'focus'), _obj), _applyDecoratedDescriptor(_obj, 'showErrors', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'showErrors'), _obj), _applyDecoratedDescriptor(_obj, 'showAsyncErrors', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'showAsyncErrors'), _obj)), _obj);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Field = exports.Form = undefined;

var _mobx = __webpack_require__(1);

var _Form = __webpack_require__(8);

var _Form2 = _interopRequireDefault(_Form);

var _Field = __webpack_require__(5);

var _Field2 = _interopRequireDefault(_Field);

var _Initializer = __webpack_require__(14);

var _Initializer2 = _interopRequireDefault(_Initializer);

var _Helpers = __webpack_require__(15);

var _Helpers2 = _interopRequireDefault(_Helpers);

var _Actions = __webpack_require__(16);

var _Actions2 = _interopRequireDefault(_Actions);

var _Utils = __webpack_require__(17);

var _Utils2 = _interopRequireDefault(_Utils);

var _Events = __webpack_require__(18);

var _Events2 = _interopRequireDefault(_Events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
  Enables MobX strict mode globally (TEST only).
  - - - - - - - - - - - - - - - - - -
  In strict mode, it is not allowed to
  change any state outside of an action
*/
if (process.env.TEST) {
  _mobx.configure ? (0, _mobx.configure)({ enforceActions: true }) : (0, _mobx.useStrict)(true);
}

/**
  Extend Classes with Prototype
  - - - - - - - - - - - - - - - - - -
  Cannot use Object.assign as @action
  methods on mixins are non-enumerable
*/


/* shared prototype methods */
var extend = function extend($class, $obj) {
  return $obj.forEach(function (mixin) {
    return Object.getOwnPropertyNames(mixin).forEach(function (name) {
      return $class.prototype[name] = mixin[name];
    });
  });
}; // eslint-disable-line

var shared = [_Initializer2.default, _Actions2.default, _Helpers2.default, _Utils2.default, _Events2.default];

extend(_Form2.default, shared.concat(_Form.prototypes));
extend(_Field2.default, shared.concat(_Field.prototypes));

exports.default = _Form2.default;
exports.Form = _Form2.default;
exports.Field = _Field2.default;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prototypes = exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _desc2, _value2, _obj;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _Base2 = __webpack_require__(4);

var _Base3 = _interopRequireDefault(_Base2);

var _Validator = __webpack_require__(10);

var _Validator2 = _interopRequireDefault(_Validator);

var _State = __webpack_require__(11);

var _State2 = _interopRequireDefault(_State);

var _Field = __webpack_require__(5);

var _Field2 = _interopRequireDefault(_Field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var Form = (_class = function (_Base) {
  _inherits(Form, _Base);

  function Form() {
    var setup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$name = _ref.name,
        name = _ref$name === undefined ? null : _ref$name,
        _ref$options = _ref.options,
        options = _ref$options === undefined ? {} : _ref$options,
        _ref$plugins = _ref.plugins,
        plugins = _ref$plugins === undefined ? {} : _ref$plugins,
        _ref$bindings = _ref.bindings,
        bindings = _ref$bindings === undefined ? {} : _ref$bindings,
        _ref$hooks = _ref.hooks,
        hooks = _ref$hooks === undefined ? {} : _ref$hooks,
        _ref$handlers = _ref.handlers,
        handlers = _ref$handlers === undefined ? {} : _ref$handlers;

    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this));

    _this.$hooks = {};
    _this.$handlers = {};

    _initDefineProp(_this, '$submitting', _descriptor, _this);

    _initDefineProp(_this, '$validating', _descriptor2, _this);

    _initDefineProp(_this, 'fields', _descriptor3, _this);

    _this.name = name;
    _this.$hooks = hooks;
    _this.$handlers = handlers;

    // load data from initializers methods
    var initial = _lodash2.default.each({
      setup: setup, options: options, plugins: plugins, bindings: bindings
    }, function (val, key) {
      return _lodash2.default.isFunction(_this[key]) ? _lodash2.default.merge(val, _this[key].apply(_this, [_this])) : val;
    });

    _this.state = new _State2.default({
      form: _this,
      initial: initial.setup,
      options: initial.options,
      bindings: initial.bindings
    });

    _this.validator = new _Validator2.default({
      form: _this,
      plugins: initial.plugins
    });

    _this.initFields(initial.setup);

    _this.debouncedValidation = _lodash2.default.debounce(_this.validate, _this.state.options.get('validationDebounceWait'), _this.state.options.get('validationDebounceOptions'));

    // execute validation on form initialization
    if (_this.state.options.get('validateOnInit') === true) {
      _this.validator.validate({
        showErrors: _this.state.options.get('showErrorsOnInit')
      });
    }

    _this.execHook('onInit');
    return _this;
  }

  /* ------------------------------------------------------------------ */
  /* COMPUTED */

  _createClass(Form, [{
    key: 'validatedValues',
    get: function get() {
      var data = {};
      this.each(function ($field) {
        return (// eslint-disable-line
          data[$field.path] = $field.validatedValue
        );
      });

      return data;
    }
  }, {
    key: 'clearing',
    get: function get() {
      return this.check('clearing', true);
    }
  }, {
    key: 'resetting',
    get: function get() {
      return this.check('resetting', true);
    }
  }, {
    key: 'error',
    get: function get() {
      return this.validator.error;
    }
  }, {
    key: 'hasError',
    get: function get() {
      return !!this.validator.error || this.check('hasError', true);
    }
  }, {
    key: 'isValid',
    get: function get() {
      return !this.validator.error && this.check('isValid', true);
    }
  }, {
    key: 'isPristine',
    get: function get() {
      return this.check('isPristine', true);
    }
  }, {
    key: 'isDirty',
    get: function get() {
      return this.check('isDirty', true);
    }
  }, {
    key: 'isDefault',
    get: function get() {
      return this.check('isDefault', true);
    }
  }, {
    key: 'isEmpty',
    get: function get() {
      return this.check('isEmpty', true);
    }
  }, {
    key: 'focused',
    get: function get() {
      return this.check('focused', true);
    }
  }, {
    key: 'touched',
    get: function get() {
      return this.check('touched', true);
    }
  }, {
    key: 'changed',
    get: function get() {
      return this.check('changed', true);
    }
  }, {
    key: 'disabled',
    get: function get() {
      return this.check('disabled', true);
    }
  }]);

  return Form;
}(_Base3.default), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$submitting', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, '$validating', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'fields', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({});
  }
}), _applyDecoratedDescriptor(_class.prototype, 'validatedValues', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validatedValues'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clearing', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'clearing'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resetting', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'resetting'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'error', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'error'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasError', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'hasError'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isPristine', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isPristine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDefault', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDefault'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isEmpty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isEmpty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'focused', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'focused'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'touched', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'touched'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'changed', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'changed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'disabled', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'disabled'), _class.prototype)), _class);

/**
  Prototypes
*/

exports.default = Form;
var prototypes = exports.prototypes = (_obj = {
  makeField: function makeField(data) {
    return new _Field2.default(data);
  },
  init: function init() {
    var $fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _lodash2.default.set(this, 'fields', _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({}));

    this.state.initial.props.values = $fields; // eslint-disable-line
    this.state.current.props.values = $fields; // eslint-disable-line

    this.initFields({
      fields: $fields || this.state.struct()
    });
  },
  invalidate: function invalidate() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.validator.error = message || this.state.options.get('defaultGenericError') || true;
  },
  showErrors: function showErrors() {
    var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.each(function (field) {
      return field.showErrors(show);
    });
  },
  clear: function clear() {
    this.$touched = false;
    this.$changed = false;
    this.each(function (field) {
      return field.clear(true);
    });
  },
  reset: function reset() {
    this.$touched = false;
    this.$changed = false;
    this.each(function (field) {
      return field.reset(true);
    });
  }
}, (_applyDecoratedDescriptor(_obj, 'init', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'init'), _obj), _applyDecoratedDescriptor(_obj, 'invalidate', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'invalidate'), _obj), _applyDecoratedDescriptor(_obj, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'clear'), _obj), _applyDecoratedDescriptor(_obj, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'reset'), _obj)), _obj);

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  booleans: ['hasError', 'isValid', 'isDirty', 'isPristine', 'isDefault', 'isEmpty', 'focused', 'touched', 'changed', 'disabled', 'resetting', 'clearing', 'blurred', 'deleted'],
  field: ['value', 'initial', 'default', 'label', 'placeholder', 'disabled', 'related', 'options', 'extra', 'bindings', 'type', 'hooks', 'handlers', 'deleted', 'error'],
  separated: ['values', 'initials', 'defaults', 'labels', 'placeholders', 'disabled', 'related', 'options', 'extra', 'bindings', 'types', 'hooks', 'handlers', 'deleted', 'error'],
  handlers: ['onChange', 'onToggle', 'onFocus', 'onBlur', 'onDrop', 'onSubmit', 'onReset', 'onClear', 'onAdd', 'onDel'],
  function: ['observers', 'interceptors', 'input', 'output'],
  validation: ['rules', 'validators', 'validateWith'],
  exceptions: ['isDirty', 'isPristine'],
  types: {
    isDirty: 'some',
    isPristine: 'every',
    isDefault: 'every',
    isValid: 'every',
    isEmpty: 'every',
    hasError: 'some',
    focused: 'some',
    blurred: 'some',
    touched: 'some',
    changed: 'some',
    deleted: 'every',
    disabled: 'every',
    clearing: 'every',
    resetting: 'every'
  }
};
module.exports = exports['default'];

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _descriptor;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var Validator = (_class = function () {
  function Validator() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Validator);

    this.promises = [];
    this.form = {};
    this.options = {};
    this.drivers = {};
    this.plugins = {
      vjf: undefined,
      dvr: undefined,
      svk: undefined,
      yup: undefined
    };

    _initDefineProp(this, 'error', _descriptor, this);

    _lodash2.default.merge(this.plugins, obj.plugins);
    this.form = obj.form;

    this.initDrivers();
    this.checkSVKValidationPlugin();
  }

  _createClass(Validator, [{
    key: 'initDrivers',
    value: function initDrivers() {
      var _this = this;

      _lodash2.default.map(this.plugins, function (driver, key) {
        return _this.drivers[key] = driver && _lodash2.default.has(driver, 'class') && new driver.class({
          config: driver.config,
          state: _this.form.state,
          promises: _this.promises
        });
      });
    }
  }, {
    key: 'validate',
    value: function validate() {
      var _this2 = this;

      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var path = (0, _utils.$try)(opt.path, opt);
      var field = (0, _utils.$try)(opt.field, this.form.select(path, null, null));
      var related = (0, _utils.$try)(opt.related, obj.related, true);
      var showErrors = (0, _utils.$try)(opt.showErrors, obj.showErrors, false);
      var instance = field || this.form;
      instance.$validating = true;
      instance.$validated += 1;

      this.error = null;

      return new Promise(function (resolve) {
        // validate instance (form or filed)
        if (instance.path || _lodash2.default.isString(path)) {
          _this2.validateField({
            field: instance,
            showErrors: showErrors,
            related: related,
            path: path
          });
        }

        // validate nested fields
        instance.each(function ($field) {
          return _this2.validateField({
            path: $field.path,
            field: $field,
            showErrors: showErrors,
            related: related
          });
        });

        // wait all promises
        resolve(Promise.all(_this2.promises));
      }).then((0, _mobx.action)(function () {
        instance.$validating = false;
        instance.$clearing = false;
        instance.$resetting = false;
      })).catch((0, _mobx.action)(function (err) {
        instance.$validating = false;
        instance.$clearing = false;
        instance.$resetting = false;
        throw err;
      })).then(function () {
        return instance;
      });
    }
  }, {
    key: 'validateField',
    value: function validateField(_ref) {
      var _ref$showErrors = _ref.showErrors,
          showErrors = _ref$showErrors === undefined ? false : _ref$showErrors,
          _ref$related = _ref.related,
          related = _ref$related === undefined ? false : _ref$related,
          _ref$field = _ref.field,
          field = _ref$field === undefined ? null : _ref$field,
          path = _ref.path;

      var instance = field || this.form.select(path);
      // check if the field is a valid instance
      if (!instance.path) throw new Error('Validation Error: Invalid Field Instance');
      // do not validate soft deleted fields
      if (instance.deleted && !this.form.state.options.get('validateDeletedFields')) return;
      // do not validate disabled fields
      if (instance.disabled && !this.form.state.options.get('validateDisabledFields')) return;
      // do not validate pristine fields
      if (instance.isPristine && !this.form.state.options.get('validatePristineFields')) return;
      // reset field validation
      instance.resetValidation();
      // validate with all enabled drivers
      _lodash2.default.each(this.drivers, function (driver) {
        return driver && driver.validateField(instance);
      });
      // send error to the view
      instance.showErrors(showErrors);
      // related validation
      if (related) this.relatedFieldValidation(instance, showErrors);
    }

    /**
      Validate 'related' fields if specified
      and related validation allowed (recursive)
    */

  }, {
    key: 'relatedFieldValidation',
    value: function relatedFieldValidation(field, showErrors) {
      var _this3 = this;

      if (!field.related || !field.related.length) return;

      _lodash2.default.each(field.related, function (path) {
        return _this3.validateField({
          related: false,
          showErrors: showErrors,
          path: path
        });
      });
    }
  }, {
    key: 'checkSVKValidationPlugin',
    value: function checkSVKValidationPlugin() {
      if (_lodash2.default.isNil(this.drivers.svk) && _lodash2.default.get(this.plugins, 'svk.config.schema')) {
        var form = this.state.form.name ? 'Form: ' + this.state.form.name : '';
        throw new Error('The SVK validation schema is defined but no plugin provided (SVK). ' + form);
      }
    }
  }]);

  return Validator;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'error', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
}), _applyDecoratedDescriptor(_class.prototype, 'validate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validate'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validateField', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validateField'), _class.prototype)), _class);
exports.default = Validator;
module.exports = exports['default'];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _Options = __webpack_require__(12);

var _Options2 = _interopRequireDefault(_Options);

var _Bindings = __webpack_require__(13);

var _Bindings2 = _interopRequireDefault(_Bindings);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var State = function () {
  function State(_ref) {
    var form = _ref.form,
        initial = _ref.initial,
        options = _ref.options,
        bindings = _ref.bindings;

    _classCallCheck(this, State);

    this.mode = 'mixed';
    this.strict = false;
    this.disposers = {
      interceptor: {},
      observer: {}
    };
    this.$struct = [];
    this.initial = {
      props: {},
      fields: {}
    };
    this.current = {
      props: {},
      fields: {}
    };

    this.set('form', form);
    this.initProps(initial);
    this.options = new _Options2.default();
    this.options.set(options);
    this.bindings = new _Bindings2.default();
    this.bindings.register(bindings);
    this.observeOptions();
  }

  _createClass(State, [{
    key: 'initProps',
    value: function initProps(initial) {
      var initialProps = _lodash2.default.pick(initial, [].concat(_toConsumableArray(_utils2.default.props.separated), _toConsumableArray(_utils2.default.props.validation), _toConsumableArray(_utils2.default.props.function), _toConsumableArray(_utils2.default.props.handlers)));

      this.set('initial', 'props', initialProps);

      var $unified = _utils2.default.hasUnifiedProps(initial);
      var $separated = _utils2.default.hasSeparatedProps(initial);

      if ($unified && $separated) {
        console.warn( // eslint-disable-line
        'WARNING: Your mobx-react-form instance ', this.form.name, ' is running in MIXED Mode (Unified + Separated) as fields properties definition.', 'This mode is experimental, use it at your own risk, or use only one mode.');
      }

      if (($separated || _utils2.default.isStruct(initial.fields)) && !$unified) {
        var struct = _utils2.default.$try(initial.struct || initial.fields);
        this.struct(struct);
        this.strict = true;
        this.mode = 'separated';
        return;
      }

      this.struct(initial.struct);
      this.mode = 'unified';
    }

    /**
      Get/Set Fields Structure
    */

  }, {
    key: 'struct',
    value: function struct() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (data) this.$struct = data;
      return this.$struct;
    }

    /**
      Get Props/Fields
    */

  }, {
    key: 'get',
    value: function get(type, subtype) {
      return this[type][subtype];
    }

    /**
      Set Props/Fields
    */

  }, {
    key: 'set',
    value: function set(type, subtype) {
      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (type === 'form') {
        // subtype is the form here
        this.form = subtype;
      }

      if (type === 'initial') {
        Object.assign(this.initial[subtype], state);
        Object.assign(this.current[subtype], state);
      }

      if (type === 'current') {
        Object.assign(this.current[subtype], state);
      }
    }
  }, {
    key: 'extra',
    value: function extra() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (_lodash2.default.isString(data)) return _lodash2.default.get(this.$extra, data);
      if (data === null) return this.$extra;
      this.$extra = data;
      return null;
    }
  }, {
    key: 'observeOptions',
    value: function observeOptions() {
      var _this = this;

      // Fix Issue #201
      (0, _mobx.observe)(this.options.options, _utils2.default.checkObserve([{
        // start observing fields validateOnChange
        type: 'update',
        key: 'validateOnChange',
        to: true,
        exec: function exec() {
          return _this.form.each(function (field) {
            return field.observeValidationOnChange();
          });
        }
      }, {
        // stop observing fields validateOnChange
        type: 'update',
        key: 'validateOnChange',
        to: false,
        exec: function exec() {
          return _this.form.each(function (field) {
            return field.disposeValidationOnChange();
          });
        }
      }, {
        // start observing fields validateOnBlur
        type: 'update',
        key: 'validateOnBlur',
        to: true,
        exec: function exec() {
          return _this.form.each(function (field) {
            return field.observeValidationOnBlur();
          });
        }
      }, {
        // stop observing fields validateOnBlur
        type: 'update',
        key: 'validateOnBlur',
        to: false,
        exec: function exec() {
          return _this.form.each(function (field) {
            return field.disposeValidationOnBlur();
          });
        }
      }]));
    }
  }]);

  return State;
}();

exports.default = State;
module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _descriptor;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var Options = (_class = function () {
  function Options() {
    _classCallCheck(this, Options);

    _initDefineProp(this, 'options', _descriptor, this);
  }

  _createClass(Options, [{
    key: 'get',
    value: function get() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // handle field option
      if (_lodash2.default.has(field, 'path')) {
        if (_lodash2.default.has(field.$options, key)) {
          return field.$options[key];
        }
      }

      // fallback on global form options
      if (key) return this.options[key];
      return (0, _mobx.toJS)(this.options);
    }
  }, {
    key: 'set',
    value: function set(options) {
      if (_mobx.set) {
        (0, _mobx.set)(this.options, options);
      } else {
        (0, _mobx.extendObservable)(this.options, options);
      }
    }
  }]);

  return Options;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'options', [_mobx.observable], {
  enumerable: true,
  initializer: function initializer() {
    return {
      uniqueId: _utils.uniqueId,
      fallback: true,
      defaultGenericError: null,
      submitThrowsError: true,
      showErrorsOnInit: false,
      showErrorsOnSubmit: true,
      showErrorsOnBlur: true,
      showErrorsOnChange: true,
      showErrorsOnClear: false,
      showErrorsOnReset: true,
      validateOnInit: true,
      validateOnBlur: true,
      validateOnChange: false,
      validateOnChangeAfterInitialBlur: false,
      validateOnChangeAfterSubmit: false,
      validateDisabledFields: false,
      validateDeletedFields: false,
      validatePristineFields: true,
      strictUpdate: false,
      strictDelete: true,
      softDelete: false,
      retrieveOnlyDirtyValues: false,
      retrieveOnlyEnabledFields: false,
      autoParseNumbers: false,
      validationDebounceWait: 250,
      validationDebounceOptions: {
        leading: false,
        trailing: true
      }
    };
  }
}), _applyDecoratedDescriptor(_class.prototype, 'set', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'set'), _class.prototype)), _class);
exports.default = Options;
module.exports = exports['default'];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bindings = function () {
  function Bindings() {
    _classCallCheck(this, Bindings);

    this.templates = {
      // default: ({ field, props, keys, $try }) => ({
      //   [keys.id]: $try(props.id, field.id),
      // }),
    };
    this.rewriters = {
      default: {
        id: 'id',
        name: 'name',
        type: 'type',
        value: 'value',
        checked: 'checked',
        label: 'label',
        placeholder: 'placeholder',
        disabled: 'disabled',
        onChange: 'onChange',
        onBlur: 'onBlur',
        onFocus: 'onFocus',
        autoFocus: 'autoFocus'
      }
    };
  }

  _createClass(Bindings, [{
    key: 'load',
    value: function load(field) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
      var props = arguments[2];

      if (_lodash2.default.has(this.rewriters, name)) {
        var $bindings = {};

        _lodash2.default.each(this.rewriters[name], function ($v, $k) {
          return _lodash2.default.merge($bindings, _defineProperty({}, $v, (0, _utils.$try)(props[$k], field[$k])));
        });

        return $bindings;
      }

      return this.templates[name]({
        keys: this.rewriters[name],
        $try: _utils.$try,
        field: field,
        props: props
      });
    }
  }, {
    key: 'register',
    value: function register(bindings) {
      var _this = this;

      _lodash2.default.each(bindings, function (val, key) {
        if (_lodash2.default.isFunction(val)) _lodash2.default.merge(_this.templates, _defineProperty({}, key, val));
        if (_lodash2.default.isPlainObject(val)) _lodash2.default.merge(_this.rewriters, _defineProperty({}, key, val));
      });

      return this;
    }
  }]);

  return Bindings;
}();

exports.default = Bindings;
module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _desc, _value, _obj;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

var _parser = __webpack_require__(3);

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
  Field Initializer
*/
exports.default = (_obj = {
  initFields: function initFields(initial, update) {
    var _this = this;

    var fallback = this.state.options.get('fallback');
    var $path = function $path(key) {
      return _lodash2.default.trimStart([_this.path, key].join('.'), '.');
    };

    var fields = void 0;
    fields = _parser2.default.prepareFieldsData(initial, this.state.strict, fallback);
    fields = _parser2.default.mergeSchemaDefaults(fields, this.validator);

    // create fields
    _lodash2.default.forIn(fields, function (field, key) {
      var path = $path(key);
      var $f = _this.select(path, null, false);
      if (_lodash2.default.isNil($f)) {
        if (fallback) {
          _this.initField(key, path, field, update);
        } else {
          var structPath = _utils2.default.pathToStruct(path);
          var struct = _this.state.struct();
          var found = struct.filter(function (s) {
            return s.startsWith(structPath);
          }).find(function (s) {
            return s.charAt(structPath.length) === '.' || s.substr(structPath.length, 2) === '[]' || s === structPath;
          });

          if (found) _this.initField(key, path, field, update);
        }
      }
    });
  },
  initField: function initField(key, path, data) {
    var update = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var initial = this.state.get('current', 'props');
    var struct = _utils2.default.pathToStruct(path);
    // try to get props from separated objects
    var $try = function $try(prop) {
      return _lodash2.default.get(initial[prop], struct);
    };

    var props = {
      $value: _lodash2.default.get(initial['values'], path),
      $label: $try('labels'),
      $placeholder: $try('placeholders'),
      $default: $try('defaults'),
      $initial: $try('initials'),
      $disabled: $try('disabled'),
      $bindings: $try('bindings'),
      $type: $try('types'),
      $options: $try('options'),
      $extra: $try('extra'),
      $related: $try('related'),
      $hooks: $try('hooks'),
      $handlers: $try('handlers'),
      $validatedWith: $try('validatedWith'),
      $validators: $try('validators'),
      $rules: $try('rules'),
      $observers: $try('observers'),
      $interceptors: $try('interceptors'),
      $input: $try('input'),
      $output: $try('output')
    };

    var field = this.state.form.makeField({
      key: key, path: path, data: data, props: props, update: update, state: this.state
    });

    this.fields.merge(_defineProperty({}, key, field));

    return field;
  }
}, (_applyDecoratedDescriptor(_obj, 'initField', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'initField'), _obj)), _obj);
module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
  Field Helpers
*/
exports.default = {

  /**
   Fields Selector (alias of select)
   */
  $: function $(key) {
    return this.select(key);
  },


  /**
   Fields Values (recursive with Nested Fields)
   */
  values: function values() {
    return this.get('value');
  },


  /**
   Fields Errors (recursive with Nested Fields)
   */
  errors: function errors() {
    return this.get('error');
  },


  /**
   Fields Labels (recursive with Nested Fields)
   */
  labels: function labels() {
    return this.get('label');
  },


  /**
   Fields Placeholders (recursive with Nested Fields)
   */
  placeholders: function placeholders() {
    return this.get('placeholder');
  },


  /**
   Fields Default Values (recursive with Nested Fields)
   */
  defaults: function defaults() {
    return this.get('default');
  },


  /**
   Fields Initial Values (recursive with Nested Fields)
   */
  initials: function initials() {
    return this.get('initial');
  },


  /**
   Fields Types (recursive with Nested Fields)
   */
  types: function types() {
    return this.get('type');
  }
};
module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _desc, _value, _obj;

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

var _parser = __webpack_require__(3);

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
  Field Actions
*/
exports.default = (_obj = {
  validate: function validate() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var $opt = _lodash2.default.merge(opt, { path: this.path });
    return this.state.form.validator.validate($opt, obj);
  },
  submit: function submit() {
    var _this = this;

    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.$submitting = true;
    this.$submitted += 1;

    var exec = function exec(isValid) {
      return isValid ? _this.execHook('onSuccess', o) : _this.execHook('onError', o);
    };

    var validate = function validate() {
      return _this.validate({
        showErrors: _this.state.options.get('showErrorsOnSubmit', _this)
      }).then(function (_ref) {
        var isValid = _ref.isValid;

        var handler = exec(isValid);
        if (isValid) return handler;
        var $err = _this.state.options.get('defaultGenericError', _this);
        var $throw = _this.state.options.get('submitThrowsError', _this);
        if ($throw && $err) _this.invalidate();
        return handler;
      })
      // eslint-disable-next-line
      .then((0, _mobx.action)(function () {
        return _this.$submitting = false;
      })).catch((0, _mobx.action)(function (err) {
        _this.$submitting = false;
        throw err;
      })).then(function () {
        return _this;
      });
    };

    return _utils2.default.isPromise(exec) ? exec.then(function () {
      return validate();
    }) : validate();
  },


  /**
   Check Field Computed Values
   */
  check: function check(prop) {
    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _utils2.default.allowedProps('booleans', [prop]);

    return deep ? _utils2.default.checkPropType({
      type: _utils2.default.props.types[prop],
      data: this.deepCheck(_utils2.default.props.types[prop], prop, this.fields)
    }) : this[prop];
  },
  deepCheck: function deepCheck(type, prop, fields) {
    var _this2 = this;

    var $fields = _utils2.default.getObservableMapValues(fields);
    return _lodash2.default.transform($fields, function (check, field) {
      if (!field.fields.size || _utils2.default.props.exceptions.includes(prop)) {
        check.push(field[prop]);
      }

      var $deep = _this2.deepCheck(type, prop, field.fields);
      check.push(_utils2.default.checkPropType({ type: type, data: $deep }));
      return check;
    }, []);
  },


  /**
   Update Field Values recurisvely
   OR Create Field if 'undefined'
   */
  update: function update(fields) {
    if (!_lodash2.default.isPlainObject(fields)) {
      throw new Error('The update() method accepts only plain objects.');
    }

    return this.deepUpdate(_parser2.default.prepareFieldsData({ fields: fields }));
  },
  deepUpdate: function deepUpdate(fields) {
    var _this3 = this;

    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var recursion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    _lodash2.default.each(fields, function (field, key) {
      var $key = _lodash2.default.has(field, 'name') ? field.name : key;
      var $path = _lodash2.default.trimStart(path + '.' + $key, '.');
      var $field = _this3.select($path, null, false);
      var $container = _this3.select(path, null, false) || _this3.state.form.select(_this3.path, null, false);

      if (!_lodash2.default.isNil($field) && !_lodash2.default.isUndefined(field)) {
        if (_lodash2.default.isArray($field.values())) {
          var n = _lodash2.default.max(_lodash2.default.map(field.fields, function (f, i) {
            return Number(i);
          }));
          if (n === undefined) n = -1; // field's value is []
          _lodash2.default.each(_utils2.default.getObservableMapValues($field.fields), function ($f) {
            if (Number($f.name) > n) $field.fields.delete($f.name);
          });
        }
        if (_lodash2.default.isNull(field) || _lodash2.default.isNil(field.fields)) {
          $field.$value = _parser2.default.parseInput($field.$input, {
            separated: field
          });
          return;
        }
      }

      if (!_lodash2.default.isNil($container) && _lodash2.default.isNil($field)) {
        // get full path when using update() with select() - FIX: #179
        var $newFieldPath = _lodash2.default.trimStart([_this3.path, $path].join('.'), '.');
        // init field into the container field
        $container.initField($key, $newFieldPath, field, true);
      } else if (recursion) {
        if (_lodash2.default.has(field, 'fields') && !_lodash2.default.isNil(field.fields)) {
          // handle nested fields if defined
          _this3.deepUpdate(field.fields, $path);
        } else {
          // handle nested fields if undefined or null
          var $fields = _parser2.default.pathToFieldsTree(_this3.state.struct(), $path);
          _this3.deepUpdate($fields, $path, false);
        }
      }
    });
  },


  /**
    Get Fields Props
   */
  get: function get() {
    var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (_lodash2.default.isNil(prop)) {
      return this.deepGet([].concat(_toConsumableArray(_utils2.default.props.booleans), _toConsumableArray(_utils2.default.props.field), _toConsumableArray(_utils2.default.props.validation)), this.fields);
    }

    _utils2.default.allowedProps('all', _lodash2.default.isArray(prop) ? prop : [prop]);

    if (_lodash2.default.isString(prop)) {
      if (strict && this.fields.size === 0) {
        return _parser2.default.parseCheckOutput(this, prop);
      }

      var value = this.deepGet(prop, this.fields);
      return _parser2.default.parseCheckArray(this, value, prop);
    }

    return this.deepGet(prop, this.fields);
  },


  /**
    Get Fields Props Recursively
   */
  deepGet: function deepGet(prop, fields) {
    var _this4 = this;

    return _lodash2.default.transform(_utils2.default.getObservableMapValues(fields), function (obj, field) {
      var $nested = function $nested($fields) {
        return $fields.size !== 0 ? _this4.deepGet(prop, $fields) : undefined;
      };

      Object.assign(obj, _defineProperty({}, field.key, { fields: $nested(field.fields) }));

      if (_lodash2.default.isString(prop)) {
        var removeValue = prop === 'value' && (_this4.state.options.get('retrieveOnlyDirtyValues', _this4) && field.isPristine || _this4.state.options.get('retrieveOnlyEnabledFields', _this4) && field.disabled || _this4.state.options.get('softDelete', _this4) && field.deleted);

        if (field.fields.size === 0) {
          delete obj[field.key]; // eslint-disable-line
          if (removeValue) return obj;
          return Object.assign(obj, _defineProperty({}, field.key, _parser2.default.parseCheckOutput(field, prop)));
        }

        var value = _this4.deepGet(prop, field.fields);
        if (prop === 'value') value = field.$output(value);

        delete obj[field.key]; // eslint-disable-line
        if (removeValue) return obj;

        return Object.assign(obj, _defineProperty({}, field.key, _parser2.default.parseCheckArray(field, value, prop)));
      }

      _lodash2.default.each(prop, function ($prop) {
        return Object.assign(obj[field.key], _defineProperty({}, $prop, field[$prop]));
      });

      return obj;
    }, {});
  },
  set: function set(prop, data) {
    // UPDATE CUSTOM PROP
    if (_lodash2.default.isString(prop) && !_lodash2.default.isUndefined(data)) {
      _utils2.default.allowedProps('field', [prop]);
      var deep = _lodash2.default.isObject(data) && prop === 'value' || _lodash2.default.isPlainObject(data);
      if (deep && this.hasNestedFields) this.deepSet(prop, data, '', true);else _lodash2.default.set(this, '$' + prop, data);
      return;
    }

    // NO PROP NAME PROVIDED ("prop" is value)
    if (_lodash2.default.isNil(data)) {
      if (this.hasNestedFields) this.deepSet('value', prop, '', true);else this.set('value', prop);
    }
  },


  /**
    Set Fields Props Recursively
   */
  deepSet: function deepSet($, data) {
    var _this5 = this;

    var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var recursion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var err = 'You are updating a not existent field:';
    var isStrict = this.state.options.get('strictUpdate', this);

    if (_lodash2.default.isNil(data)) {
      this.each(function (field) {
        return field.clear(true);
      });
      return;
    }

    _lodash2.default.each(data, function ($val, $key) {
      var $path = _lodash2.default.trimStart(path + '.' + $key, '.');
      // get the field by path joining keys recursively
      var field = _this5.select($path, null, isStrict);
      // if no field found when is strict update, throw error
      if (isStrict) _utils2.default.throwError($path, field, err);
      // update the field/fields if defined
      if (!_lodash2.default.isUndefined(field)) {
        // update field values or others props
        if (!_lodash2.default.isUndefined($val)) {
          field.set($, $val, recursion);
        }
        // update values recursively only if field has nested
        if (field.fields.size && _lodash2.default.isObject($val)) {
          _this5.deepSet($, $val, $path, recursion);
        }
      }
    });
  },
  add: function add(obj) {
    var _this6 = this;

    if (_utils2.default.isArrayOfObjects(obj)) {
      return _lodash2.default.each(obj, function (values) {
        return _this6.update(_defineProperty({}, _utils2.default.maxKey(_this6.fields), values));
      });
    }

    var key = void 0; // eslint-disable-next-line
    if (_lodash2.default.has(obj, 'key')) key = obj.key;
    if (_lodash2.default.has(obj, 'name')) key = obj.name;
    if (!key) key = _utils2.default.maxKey(this.fields);

    var $path = function $path($key) {
      return _lodash2.default.trimStart([_this6.path, $key].join('.'), '.');
    };
    var tree = _parser2.default.pathToFieldsTree(this.state.struct(), this.path, 0, true);
    return this.initField(key, $path(key), _lodash2.default.merge(tree[0], obj));
  },
  del: function del() {
    var $path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var isStrict = this.state.options.get('strictDelete', this);
    var path = _parser2.default.parsePath(_utils2.default.$try($path, this.path));
    var fullpath = _lodash2.default.trim([this.path, path].join('.'), '.');
    var container = this.container($path);
    var keys = _lodash2.default.split(path, '.');
    var last = _lodash2.default.last(keys);

    if (isStrict && !container.fields.has(last)) {
      var msg = 'Key "' + last + '" not found when trying to delete field';
      _utils2.default.throwError(fullpath, null, msg);
    }

    if (this.state.options.get('softDelete', this)) {
      return this.select(fullpath).set('deleted', true);
    }

    return container.fields.delete(last);
  }
}, (_applyDecoratedDescriptor(_obj, 'submit', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'submit'), _obj), _applyDecoratedDescriptor(_obj, 'deepUpdate', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'deepUpdate'), _obj), _applyDecoratedDescriptor(_obj, 'set', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'set'), _obj), _applyDecoratedDescriptor(_obj, 'add', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'add'), _obj), _applyDecoratedDescriptor(_obj, 'del', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'del'), _obj)), _obj);
module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

var _parser = __webpack_require__(3);

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
  Field Utils
*/
exports.default = {

  /**
   Fields Selector
   */
  select: function select(path) {
    var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var isStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var $path = _parser2.default.parsePath(path);

    var keys = _lodash2.default.split($path, '.');
    var head = _lodash2.default.head(keys);

    keys.shift();

    var $fields = _lodash2.default.isNil(fields) ? this.fields.get(head) : fields.get(head);

    var stop = false;
    _lodash2.default.each(keys, function ($key) {
      if (stop) return;
      if (_lodash2.default.isNil($fields)) {
        $fields = undefined;
        stop = true;
      } else {
        $fields = $fields.fields.get($key);
      }
    });

    if (isStrict) _utils2.default.throwError(path, $fields);

    return $fields;
  },


  /**
    Get Container
   */
  container: function container($path) {
    var path = _parser2.default.parsePath(_utils2.default.$try($path, this.path));
    var cpath = _lodash2.default.trim(path.replace(new RegExp('[^./]+$'), ''), '.');

    if (!!this.path && _lodash2.default.isNil($path)) {
      return cpath !== '' ? this.state.form.select(cpath, null, false) : this.state.form;
    }

    return cpath !== '' ? this.select(cpath, null, false) : this;
  },


  /**
    Has Field
   */
  has: function has(path) {
    return this.fields.has(path);
  },


  /**
   Map Fields
  */
  map: function map(cb) {
    return _utils2.default.getObservableMapValues(this.fields).map(cb);
  },


  /**
   * Iterates deeply over fields and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, depth).
   *
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Array|Object} [fields=form.fields] fields to iterate over.
   * @param {number} [depth=1] The recursion depth for internal use.
   * @returns {Array} Returns [fields.values()] of input [fields] parameter.
   * @example
   *
   * JSON.stringify(form)
   * // => {
     *   "fields": {
     *     "state": {
     *       "fields": {
     *         "city": {
     *           "fields": { "places": {
     *                "fields": {},
     *                "key": "places", "path": "state.city.places", "$value": "NY Places"
     *              }
     *           },
     *           "key": "city", "path": "state.city", "$value": "New York"
     *         }
     *       },
     *       "key": "state", "path": "state", "$value": "USA"
     *     }
     *   }
     * }
   *
   * const data = {};
   * form.each(field => data[field.path] = field.value);
   * // => {
     *   "state": "USA",
     *   "state.city": "New York",
     *   "state.city.places": "NY Places"
     * }
   *
   */
  each: function each(iteratee) {
    var _this = this;

    var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var $fields = fields || this.fields;
    _lodash2.default.each(_utils2.default.getObservableMapValues($fields), function (field, index) {
      iteratee(field, index, depth);

      if (field.fields.size !== 0) {
        _this.each(iteratee, field.fields, depth + 1);
      }
    });
  }
};
module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mobx = __webpack_require__(1);

var _lodash = __webpack_require__(0);

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = __webpack_require__(2);

var _utils2 = _interopRequireDefault(_utils);

var _parser = __webpack_require__(3);

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
  Field Events
*/
exports.default = {

  /**
   MobX Event (observe/intercept)
   */
  MOBXEvent: function MOBXEvent(_ref) {
    var _this = this;

    var _ref$path = _ref.path,
        path = _ref$path === undefined ? null : _ref$path,
        _ref$key = _ref.key,
        key = _ref$key === undefined ? 'value' : _ref$key,
        call = _ref.call,
        type = _ref.type;

    var $instance = this.select(path || this.path, null, null) || this;

    var $call = function $call(change) {
      return call.apply(null, [{
        change: change,
        form: _this.state.form,
        path: $instance.path || null,
        field: $instance.path ? $instance : null
      }]);
    };

    var fn = void 0;
    var ffn = void 0;

    if (type === 'observer') {
      fn = _mobx.observe;
      ffn = $instance.fields.observe;
    }

    if (type === 'interceptor') {
      // eslint-disable-next-line
      key = '$' + key;
      fn = _mobx.intercept;
      ffn = $instance.fields.intercept;
    }

    var $dkey = $instance.path ? key + '@' + $instance.path : key;

    _lodash2.default.merge(this.state.disposers[type], _defineProperty({}, $dkey, key === 'fields' ? ffn.apply(function (change) {
      return $call(change);
    }) : fn($instance, key, function (change) {
      return $call(change);
    })));
  },


  /**
   Dispose MOBX Events
   */
  dispose: function dispose() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (this.path && opt) return this.disposeSingle(opt);
    return this.disposeAll(opt);
  },


  /**
   Dispose All Events (observe/intercept)
   */
  disposeAll: function disposeAll() {
    var dispose = function dispose(disposer) {
      return disposer.apply();
    };
    _lodash2.default.each(this.state.disposers.interceptor, dispose);
    _lodash2.default.each(this.state.disposers.observer, dispose);
    this.state.disposers = { interceptor: {}, observer: {} };
    return null;
  },


  /**
   Dispose Single Event (observe/intercept)
   */
  disposeSingle: function disposeSingle(_ref2) {
    var type = _ref2.type,
        _ref2$key = _ref2.key,
        key = _ref2$key === undefined ? 'value' : _ref2$key,
        _ref2$path = _ref2.path,
        path = _ref2$path === undefined ? null : _ref2$path;

    var $path = _parser2.default.parsePath(_utils2.default.$try(path, this.path));
    // eslint-disable-next-line
    if (type === 'interceptor') key = '$' + key; // target observables
    this.state.disposers[type][key + '@' + $path].apply();
    delete this.state.disposers[type][key + '@' + $path];
  }
};
module.exports = exports['default'];

/***/ })
/******/ ]);
});
//# sourceMappingURL=MobxReactForm.umd.js.map